{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-09-21T01:08:35.930083+00:00",
  "repo": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOKszxDc54CeKV",
      "title": "Turning off DTLS replay protection is typically a major security problem",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/2",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/f990CfKIRDQKTa4tAkIrgHcKqWc/\r\n\r\n---------------------------\r\n\r\nHi,\r\n\r\nReading RFC 9147 (DTLS 1.3) I cannot find any other interpretation than that replay protection may be disabled for all records. This is not a problem for the initial lock-step handshake, alerts, KeyUpdate, and ACKs. It seems to be a major problem for NewSessionTicket, NewConnectionId, RequestConnectionId, and Post-handshake client authentication as the lack of replay protection might significantly affect availability. It seems to me that DTLS 1.3 forgot to update replay protection based on the new post-handshake messages. Let me know if I miss something.\r\n\r\nIt is a bit surprising that DTLS 1.3 published in 2022 allows the application to turn off replay protection at all. This very far from current best practice for security protocols. There are very good reasons why Datagram QUIC mandates replay protection and why TLS 1.3 has several pages discussing security considerations for 0-RTT data, which lacks replay protection. In general, turning off replay protection (even just for application data) might lead to loss of confidentiality, integrity, and availability, i.e., the whole CIA triad.\r\n\r\nApplications cannot be expected to understand the severe consequences of not having replay protection or understand how to fix it on the application layer. I also don't see any need for turning off replay protection except RFC 6083 which is a bit of a special case, and which turned out to have replay issues.\r\nhttps://datatracker.ietf.org/meeting/115/materials/slides-115-tsvwg-sctp-auth-security-issues-00\r\n\r\nI would strongly recommend all DTLS 1.3 libraries to completely remove the option to disable replay protection.\r\n\r\nAn easy fix for the post-handshake messages is to \"clarify\" that replay protection must not be turned off for anything else than application data. I you agree I can submit an \u201cerratum\u201d for RFC 9147. But this does not solve the general issue that turning off replay protection would be a major security problem in almost all applications.\r\n\r\nCheers,\r\nJohn Preu\u00df Mattsson\r\n",
      "createdAt": "2023-11-28T08:32:30Z",
      "updatedAt": "2024-06-20T09:51:34Z",
      "closedAt": "2024-06-20T09:51:34Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I am very sceptical to the option to turn of the DTLS replay protection. Is this needed for anything? I would recommend removing it. Otherwise a lot of analysis and considerations are likely needed.",
          "createdAt": "2023-11-28T08:35:47Z",
          "updatedAt": "2023-11-28T08:35:47Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOKszxDc57gLRq",
      "title": "PVALID needs to define how it is reliability mechanism works",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/3",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-09T10:01:45Z",
      "updatedAt": "2024-07-08T16:03:58Z",
      "closedAt": "2024-07-08T16:03:58Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Has been added, using RTO based retransmission. ",
          "createdAt": "2024-07-08T16:03:58Z",
          "updatedAt": "2024-07-08T16:03:58Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOKszxDc57x9Yj",
      "title": "Split DTLS Options Identifier space info safe to ignore, ignore and report, fail types. ",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/5",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The DTLS options in the parameter is not split into categories where one can define them as being possible to ignore or need to be understood. That should be done by splitting the spaces based on the higher bits like for other SCTP code points.",
      "createdAt": "2024-01-11T13:43:30Z",
      "updatedAt": "2024-07-08T16:03:38Z",
      "closedAt": "2024-07-08T16:03:38Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "The DTLS options have been removed to no longer relevant. ",
          "createdAt": "2024-07-08T16:03:38Z",
          "updatedAt": "2024-07-08T16:03:38Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOKszxDc6GfDZj",
      "title": "Update PPID registration",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/6",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This draft has gotten a PPID assigned:\r\n4242    DTLS Chunk Key-Management Messages      [draft-westerlund-tsvwg-sctp-dtls-chunk-01]\r\n\r\nNeed to update the draft.",
      "createdAt": "2024-04-22T11:25:33Z",
      "updatedAt": "2024-07-08T16:03:11Z",
      "closedAt": "2024-07-08T16:03:11Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Has been accomplished. ",
          "createdAt": "2024-07-08T16:03:11Z",
          "updatedAt": "2024-07-08T16:03:11Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOKszxDc6O0I60",
      "title": "Are there benefits to encrypt PPID 4242 when possible",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/7",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "teiclap"
      ],
      "labels": [],
      "body": "As currently defined the DTLS Keymanagement messages in Data chunk with PPID=4242 will always be sent unencrypted. This is simple and avoids error cases if keys expires or are removed for the DTLS Chunk. However, are there any security benefits to encrypting them when one can? It will make targeted attacks against the key-managment harder for established associations, the the actual message itself is protected, but identifiable. However, one can never prevent denial in general through packet dropping. Also it makes the key-management sensitive to synchronization issues in case of failures or key-limit expiration requiring fallback behaviors. \r\n\r\nSo the main question is if extra complexities to have different choices and fallback handling is worth the potential limited benefit of encrypting. ",
      "createdAt": "2024-07-08T16:09:42Z",
      "updatedAt": "2024-10-04T07:47:54Z",
      "closedAt": "2024-10-04T07:47:54Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Allowing unprotected packets with DATA chunks actually create one significant weakness. It allows attackers capable of injecting packets to attempt to impact the DATA chunk tracking process, inject overlapping DATA chunks with protected and impact the content of the SACK block. Thus, it is likely simplest to always require using protected packets. If there would be a serious issue with keys, one can perform a SCTP association restart using the restart DTLS session context. This is disruptive, but the failure case to not have a valid key are also fairly major and should not be happening in associations. ",
          "createdAt": "2024-08-30T08:46:36Z",
          "updatedAt": "2024-08-30T08:46:36Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Authors have decided to not allow plain text data. Need text change. ",
          "createdAt": "2024-09-10T12:46:04Z",
          "updatedAt": "2024-09-10T12:46:04Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "By requiring to allways use DTLS Chunk after reaching PROTECTED state this issue have been resolved.",
          "createdAt": "2024-10-04T07:47:54Z",
          "updatedAt": "2024-10-04T07:47:54Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOKszxDc6O0Jxe",
      "title": "Does the API need a: Set Q limit call?",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/8",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "Does the API need an call for setting the invocation limit (Q) on R,DCI, epoch to prevent over usage of key?",
      "createdAt": "2024-07-08T16:11:17Z",
      "updatedAt": "2024-10-10T08:31:22Z",
      "closedAt": "2024-10-10T08:31:22Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Follow TLS here, we don't need a strict limit. It is sufficient to check if the limit is passed, and this can be implememted by periodic polling, or a callback. Suggestion to clarify that there are alternative implementation in the draft. Lets reveiw and improvet text on limits.",
          "createdAt": "2024-09-10T12:56:10Z",
          "updatedAt": "2024-09-10T12:56:10Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOKszxDc6O0K7_",
      "title": "Clarify privacy properties impact",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/9",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "\"Using a security protocol in the SCTP DTLS chunk might lower the privacy properties of the security protocol as the SCTP Verification Tag is an unique identifier for the association.\"\r\n\r\nThis text is unclear on what impact is referred to. \r\n",
      "createdAt": "2024-07-08T16:13:28Z",
      "updatedAt": "2024-10-10T09:03:59Z",
      "closedAt": "2024-10-10T09:03:59Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Clarify this from DTLS perspective. The SCTP association will anyway be identifiable based on 5-tuple where destination IP and port and fixed for an assocation per direction. ",
          "createdAt": "2024-09-10T13:01:20Z",
          "updatedAt": "2024-09-10T13:01:20Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOKszxDc6TibbW",
      "title": "Clarify the case when Endpoints allow reverting to rfc6083",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/10",
      "state": "CLOSED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It is possible that the Endpoint wants to advertise the peer that it can handle rfc6083 in INIT by using the set of INIT parameters specified in rfc6083, together with the DTLS-CHUNK.\r\nIn case the peer cannot handle DTLS-CHUNK, the Association would be set using DTLS/SCTP according to rfc6083.\r\nSince rfc6083 has known packet size limitations and security weaknesses, we need to explain that the combination of rfc6083 as revert solution for DTLS-CHUNK is not viable and that such combination should no be accepted in any case.",
      "createdAt": "2024-08-20T10:22:00Z",
      "updatedAt": "2024-10-04T08:23:03Z",
      "closedAt": "2024-10-04T08:23:03Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "I think we need to clarify the process of using PVALID and when to send the error. So for example if the client offers DTLS chunk and DTLS/SCTP and the server only knows DTLS Chunk, is that a PVALID error. Or is it only if there are missing security solutions it does recognize? \r\n\r\nIn addition I think the handling of other solutions needs to be written into a procedure or new section, rather than just the security considerations on downgrade. ",
          "createdAt": "2024-09-06T08:44:33Z",
          "updatedAt": "2024-09-06T08:44:33Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Text has been added to address this issue. ",
          "createdAt": "2024-10-04T08:23:03Z",
          "updatedAt": "2024-10-04T08:23:03Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOKszxDc6Uzyy3",
      "title": "Avoiding deadlock in Initial key-establishment",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/11",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "During implementation we realized we have a potential for a deadlock in the key establishment process. This would occur if the DTLS server configures and starts using the first DCI as soon as possible. With Diffie-Hellman key-exchange the client can first generate the full set of keying material when it has received the servers ServerHello message. This being delivered using unprotected DATA chunks using PPID=4242 requires that the server are certain that this has been delivered to the client before the server starts transmitting and requiring any incoming packets to be protected. \r\n\r\nTo simplify for the server's state handling an initial proposal to deal with this is the below. So when the server has gotten far along the process to have keys, it will install the created DCI. However, it will not use it for outgoing nor require it to be used, i.e. still accept unprotected traffic. It falls on the client to not enter the Validation state and start that process until it is certain that it self and the server have the DCI in place. The server will when receiving the protected PVALID chunk move to Protected and at that stage use protected traffic going forward. \r\n\r\n```\r\n     +---------------+\r\n     |  ESTABLISHED  |\r\n     +-------+-------+\r\n             |\r\n             | If INIT/INIT-ACK has DTLS 1.3 Chunk\r\n             | Protected Association Parameter\r\n             v\r\n+--------------------------+\r\n| PROTECTION INITILIZATION |\r\n+------------+-------------+\r\n             |\r\n             | start T-valid timer.\r\n             |\r\n             | [DTLS SETUP]\r\n             |-----------------\r\n             | send and receive\r\n             | DTLS handshake\r\n             v\r\n +----------------------+\r\n |  VALIDATION INIT     |\r\n +-----------+----------+\r\n             | Client and Server: Init DCI, Don't use it for transmission\r\n\t     | \r\n\t     | Client: Go to next state\r\n\t     | Server: Wait for Protected PVALID from Client\r\n             V\r\n +----------------------+\r\n |      VALIDATION      |\r\n +-----------+----------+\r\n             | \r\n             | [ENDPOINT VALIDATION]\r\n             | Require use of DTLS Chunk    \r\n             |------------------------\r\n             | send and receive\r\n             | PVALID by means of\r\n             | DTLS chunk.\r\n             v\r\n     +---------------+\r\n     |   PROTECTED   | \r\n     +---------------+\r\n ```",
      "createdAt": "2024-08-30T08:41:03Z",
      "updatedAt": "2024-10-04T08:22:25Z",
      "closedAt": "2024-10-04T08:22:25Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "The procedure have been clarified to avoid deadlock, especially the need for accepting plain text chunks during validation to ensure ",
          "createdAt": "2024-10-04T08:22:25Z",
          "updatedAt": "2024-10-04T08:22:25Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOKszxDc6Vl3j1",
      "title": "PVALID retransmission optimisation",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/12",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "gloinul"
      ],
      "labels": [],
      "body": "So when the client role sends the PVALID it will retransmit after one RTO. However, if the clients PVALID reached the server and it was the response PVALID that was lost, the client may receive additional SCTP packets with DTLS protected chunks. This indicate to the client that a likely loss of the server-> client PVALID chunk. The caveat is network reordering, thus a short delay could prevent unnecessary retransmissions. However, I don't see an issue with triggering one retransmission immediately, and restart the RTO timer. The whole goal of this is speeding up the time until the association on both sides reaches PROTECTED state.",
      "createdAt": "2024-09-06T07:32:50Z",
      "updatedAt": "2024-10-04T07:54:49Z",
      "closedAt": "2024-10-04T07:54:49Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "We need to add also that initiator should drop received DATA Chunks that are not PPID=4242 until PVALID response have been received. \r\n ",
          "createdAt": "2024-09-10T13:13:46Z",
          "updatedAt": "2024-09-10T13:13:46Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "This issue have been resolved with clarification per PR #13 on immediate retransmission. ",
          "createdAt": "2024-10-04T07:54:49Z",
          "updatedAt": "2024-10-04T07:54:49Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOKszxDc6cvCDK",
      "title": "IANA early review noted that there are no upper limit in regestry definition",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/19",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "IANA did an early review and commented:\r\n\r\nIn Section 10.2, what\u2019s the upper numeric boundary (e.g., 31) for the \u201cbit position\u201d field?\r\n\r\nThis should be clarified as we allow for multiple 32-bit words. So the limit are likely the maximum of words in a parameter. ",
      "createdAt": "2024-11-01T17:53:54Z",
      "updatedAt": "2025-06-12T13:38:47Z",
      "closedAt": "2025-06-12T13:38:47Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "A limit has been implemented. ",
          "createdAt": "2025-06-12T13:38:47Z",
          "updatedAt": "2025-06-12T13:38:47Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOKszxDc64MTMy",
      "title": "DT : Replace PVALID with a Data Chunk and a new PPID",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/22",
      "state": "CLOSED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen",
        "gloinul"
      ],
      "labels": [],
      "body": "From the Design Team : the PVALID chunk is not a preferred solution, it shall be replaced by using a legacy DATA Chunk having a new PPID.",
      "createdAt": "2025-05-26T06:58:06Z",
      "updatedAt": "2025-09-19T10:34:11Z",
      "closedAt": "2025-09-19T10:34:11Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "@teiclap and I tried to implement the design team direction of attempting to move the downgrade attack prevention that PVALID Chunk was supporting to the security function running in user space above an SCTP stack. We have run into issues which we think are the result of not fully thinking through this direction and would like to discuss it further.\n \nThe main goal of the PVALID mechanism is ensure that all that was negotiated in clear text was all that the sender of the respective side actually offered so no downgrades occurred at this step INIT/INIT-ACK. To be able to do that both sides needs to accurately represent all that was offered when it comes to security parameters and compare that to all that was received on the peer side. The PVALID mechanism need to carry the relevant information of both what was offered and what was received. I think it is here that we didn\u2019t think this through properly what the implications of this is when trying to do this from the user land level. \n \nThe user land process initiating an SCTP association needs to configure the SCTP stack with which security related options it wants to offer. This will result in one or more security related parameter will be included. So here I would note that we existing parameters are DTLS Chunk (with key-management indicators) and possibly also SCTP-AUTH with the chunks/all chunks, random, HMAC Algo. These offered parameters needs to be either parameterized and included in the cookie, or simply the whole set of relevant parameters included in cookie and then encrypted. \n \nThe responder sends back the INIT-ACK with parameter response for what it accepts to use and relevant parameter values. The Init-ACK also contains the state cookie containing the offered info as well as it\u2019s own response of information. As the responder want to remain stateless for this first Init/Init-ACK procedure nothing is stored locally or given to the upper layer. \n \nThe Initiator receives the INIT-ACK and verifies that the SCTP Association and configured security parameters is viable and stores either the parameters or a representation of what it received. Then it sends the Cookie ECHO back to the responder side. Here the information from the  INIT/INIT-ACK could be provided to key-management but it likely makes sense to wait until 5 when the SCTP association enters established.\n \nThe responder side receives the Cookie-ECHO and unpacks the cookie and creates the SCTP Association state and stores the security parameters. On the responder side the SCTP association is now in established state. However, the key-management step is so far not initiated by the responder but by the initiator. The responder sends the Cookie-ACK. Here is the earlies the responder side could provide the relevant information from the INIT and INIT-ACK to the key management.\n \nThe initiator is receiving the Cookie-ACK and goes into established state. As the SCTP Association establishment succeeded the key-management mechanism can be triggered. It will send its DTLS Client Hello. \n \nThe responder receives the DTLS client hell and gives it to the key-management function. Generates the DTLS Server hello and sends that back. At this point it can install DTLS Chunk receive keys, and send keys, but can\u2019t activate them until it has confirmed that the Server Hello has reached the DTLS Client. So technically this could be based on SCTP SACKs, but I think that is complex when it comes to the API function. Thus, one could initiate PVALID here and send an encrypted DTLS Chunk with a PVALID message, thus potentially mixing encrypted and unencrypted SCTP packets, however any retransmission of the Server Hello must be sent unencrypted.\n \nThe initiator receives the Server Hello and can now install both receiver keys and send keys. It now sends the DTLS Client ACK to conclude the DTLS handshake. This can be sent encrypted to my understanding. The initiator side can after having sent this initiate PVALID mechanism. \n \nThe responder receives the DTLS Client ACK (encrypted) and can also verify conclusion of DTLS handshake and also move to send only encrypted at this point. At this stage it can definitely run PVALID process. \n \nLets, now look at what information is needed to perform the PVALID mechanism. For the initiator to generate a PVALID message it needs to have the actual parameter set or a representation of that stored in the key-management user land protocol. Which means that it either can determine what would be sent based on the configuration, or need have an API function to query the SCTP stack to get what was included in the INIT. Then it could send its PVALID message with this information to the responder.\n \nThe responder when receiving the PVALID message needs to compare the included information with was actually received in the INIT message. However, due to the statelessness, it will get this from the Cookie-Echo (4) and thus needs an API function here to extract this information. I will also note that we need to handle the situation that the responder might not know all the parameters that was offered. Thus, it lacks implementation to know what some of these parameters are. Claudio and I concluded that this comparison can be done in two ways. The PVALID Chunk requires the SCTP stack to determine all options it received in the INIT based on its implementation capabilities and mark those down. Then when it receives the PVALID chunk it compared all it could understand, with all that is offered. If anything was offered that the responder implements but didn\u2019t mark as parsed from the INIT we have a potential modification and should abort. Doing this from the user land level generates certain API requirements. It basically means that in a step after (4) the responder key-management side should read up the SCTP stacks interpretation of what was offered in the INIT. It also needs and API function that gives the corresponding list of all that is implemented in this stack. We see moving this information across the SCTP stack boundary up to the key-management as non-trivial and requires generating an information structure that represents all relevant security parameter combinations. \n\nClaudio have an alternative idea that appears to both of us to result in simpler implementation assuming that PVALID remains a chunk. The core of this idea is to have the implementations perform only a byte comparison between what it received in the INIT/INIT-ACK and what is contained in the PVALID Chunk. We think only the Parameters needs to be compared. So the PVALID chunk will contain a full binary representation of the INIT or INIT-ACK parameters depending on direction. That way both sides simply save what it sent, and later sends it in the PVALID Chunk. As this binary byte object is not interpreted, only stored as part of the SCTP association state doing the validation within the SCTP level is simple and straight forward and avoids the need for additional API calls. \n \nThe only potential downside with this is that this will grow the handshake messages, especially the INIT-ACK as that message needs to contain both the parameter response in clear text, as well as both the received parameters from the INIT as well as its response but protected inside the encrypted Cookie. Thus, the INIT-ACK will contain three sets of parameters.\n \nThe design team will discuss this further.",
          "createdAt": "2025-06-12T13:37:17Z",
          "updatedAt": "2025-06-12T13:37:17Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Design team discussed this. We will encoded all security option in the DTLS Chunk Parameter. Each option is given a value and listed in a priority list. @gloinul will write parameter and IANA table. @tuexen to specify API for it.\n\nWe plan to send the PVALID messages over seperate PPID. ",
          "createdAt": "2025-06-13T08:37:51Z",
          "updatedAt": "2025-06-13T08:37:51Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "@tuexen to write api and interaction with statemachine to go from SCTP ESTABLISHED to PROTECTED including PVALID message exchange. ",
          "createdAt": "2025-06-13T08:44:10Z",
          "updatedAt": "2025-06-13T08:44:10Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I have an idea how to simplify this:\n* The client sends one or more protection solution Ids in the protection solutions parameter.\n* The server sends exactly one  protection solution Id in the protection solutions parameter. This is one of the received ones.\n* Provide an API to let the application know which protection solutions parameter was sent and received.\n* After the association is established the communication is unprotected. This allows the DTLS handshake to happen.\n* When deriving the send/recv keys, make them include the protection solutions parameters during key derivation.\n* This way the protected packets are also protected against downgrade attacks and we don't need any additional message exchanges. \n* Once you provided a receive key, no unprotected packets will be processed anymore. \n* Or am I missing something, @gloinul @hannestschofenig ",
          "createdAt": "2025-07-02T23:52:40Z",
          "updatedAt": "2025-07-02T23:52:40Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "I think including the protection solution as context value in the TLS key exporter is potentially a good idea if one was expecting to use the same labels for DTLS based key-exchanges. However, I think per key-managment solution unique labels would have the same properties. I think the important here is that two different key-managmenet specs (and thus indicated protection solutions) would not result in the same actual Traffic keys. \n\nSo, I am a bit hesitant against having no limitation on unprotected traffic prior to key-installment if I understand the implications of bullet four. So it would be volunteer to use PPID=4242 for this. Do you expect to integrate the key-management into ones ULP also with this proposal? \n\nAlso having worked on Ericsson's handshake draft I am more and more desiring to go back to the PVALID Chunk for validation. This as the timing of the exchange and how to handle that requires further interaction and puts the requirements on the key-management. I rather do it in on place, i.e. as part of chunk.",
          "createdAt": "2025-07-03T07:15:26Z",
          "updatedAt": "2025-07-03T07:15:26Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "I am considering the man-in-the-middle case where the downgrade happens by modification of INIT chunk so that the server will never be aware of the whole set of the protection solutions.\nThe client's API will never know why the server has chosen a certain solution unless a dedicated, protected handshake exists.\nI may have missed some parts of the reasoning, but I am still convinced that an handshake for validation is needed.",
          "createdAt": "2025-07-03T07:39:44Z",
          "updatedAt": "2025-07-03T07:39:44Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> I am considering the man-in-the-middle case where the downgrade happens by modification of INIT chunk so that the server will never be aware of the whole set of the protection solutions. The client's API will never know why the server has chosen a certain solution unless a dedicated, protected handshake exists. I may have missed some parts of the reasoning, but I am still convinced that an handshake for validation is needed.\n\nAssume the client puts PSID1 and PSID2 in the protection solution parameter, the attacker remove PSID1 and therefore the server only sees PSID2. Then the server responds with PSID2.\nNow\n* the client would use PSID1 and PSID2 for the client information and PSID2 for the server one in the key derivation\n* the server would use PSID2 for the client information and PSID2 for the server on.\nTherefore the keys are different and no validated information would be transferred.",
          "createdAt": "2025-07-03T08:00:24Z",
          "updatedAt": "2025-07-03T08:00:24Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "> > I am considering the man-in-the-middle case where the downgrade happens by modification of INIT chunk so that the server will never be aware of the whole set of the protection solutions. The client's API will never know why the server has chosen a certain solution unless a dedicated, protected handshake exists. I may have missed some parts of the reasoning, but I am still convinced that an handshake for validation is needed.\n> \n> Assume the client puts PSID1 and PSID2 in the protection solution parameter, the attacker remove PSID1 and therefore the server only sees PSID2. Then the server responds with PSID2. Now\n> \n> * the client would use PSID1 and PSID2 for the client information and PSID2 for the server one in the key derivation\n> * the server would use PSID2 for the client information and PSID2 for the server on.\n>   Therefore the keys are different and no validated information would be transferred.\n\nI didn't get that, yes I think it's a good idea. We would need to standardize the protection's token though, and the key derivation mechanism should also be part of the chunk draft.",
          "createdAt": "2025-07-03T08:05:00Z",
          "updatedAt": "2025-07-03T08:08:47Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think including the protection solution as context value in the TLS key exporter is potentially a good idea if one was expecting to use the same labels for DTLS based key-exchanges. However, I think per key-managment solution unique labels would have the same properties. I think the important here is that two different key-managmenet specs (and thus indicated protection solutions) would not result in the same actual Traffic keys.\n\nI think we need to be more precise:\n* We should use key management specific labels. So the traffic keys are almost always different\n* We can not guarantee that the keys are always different. But you can't guarantee that in any way.\n> \n> So, I am a bit hesitant against having no limitation on unprotected traffic prior to key-installment if I understand the implications of bullet four. So it would be volunteer to use PPID=4242 for this. \n\nThe PPID should not be looked or modified by the SCTP stack. At least not in the base stack.\nSince we want to be generic on the key management, I thought the SCTP stack will provide the information with each user message if the user message was received in a protected way or not.\nThis way the upper layer can check that its constraints are fulfilled.\n\n> Do you expect to integrate the key-management into ones ULP also with this proposal?\n\nI am not sure what this sentence means.\nWe need to wait with the downgrade protection until we can communicate in a protected way. Then we could define a simple protocol to ensure there was no downgrade and ensure that we know this before processing protected user messages. But building this step in the key derivation, which we wanted to include in the key management document anyway, sees a very clear and simple solution.\n\nIt enforces that no protected user data is delivered in case of a downgrade attack.\n> \n> Also having worked on Ericsson's handshake draft I am more and more desiring to go back to the PVALID Chunk for validation. This as the timing of the exchange and how to handle that requires further interaction and puts the requirements on the key-management. I rather do it in on place, i.e. as part of chunk.\n\nI don't follow here. You need to derive the transmission keys for the DTLD chunk. Just incorporate the information from the SCTP handshake.\n\nHowever, this makes the implementation much more complex. You need another chunk with retransmission stuff, change the state engine, ...\n\nPutting this into the key derivation, we would need to implement\n* a socket option which enforces the drop of unprotected packets\n* the sending and receiving of the protection solution parameter\n* the corresponding socket option for handling them\n* the socket options to provide the traffic and restart keys\n* the sending and receiving of the DTLS chunk\n* the exposure of user messages have been received in a protected way or not\n\nAdd of these seems to be limited functional changes that can be reviewed and tested even with pre-shared keys.",
          "createdAt": "2025-07-03T08:13:38Z",
          "updatedAt": "2025-07-03T09:13:21Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Ok, your clarification around wanting to include the whole set of offered solutions into context of the key derivation makes a difference. It still results in the chunk putting recommendation to the key-management. \n\nI think what is needed in regards to these proposal is what impact it has to state machine and abstract API functions. @tuexen can you please put a bit more details into your proposal so that we really can see what it entails and what then ends up being expected to be done by the key-management. \n\nI think there is an issue with one line of your strawman:\n\n- Once you provided a receive key, no unprotected packets will be processed anymore.\n\nI think this can result in the deadlock situations unless there is a separate call for moving to require all traffic to be encrypted.\n\nThe failure case which I don't see working is this:\n1: A->Z: DTLS CH\n2: Z->A: DTLS SH\n3: Z: Can derive both keys, only sets READ as 2 needs to be delivered as plain text. If packet loss of part of (2), SACK will be sent as plain text A->Z. \n4: A: Derives Read and Write, sets both (\n5: A->Z: P(DTLS ACK)\n6: Z: Sets Write key and locks down receiving unencrypted.\n7: Z->A: Send P(PVALID message)\n8: A: Locks down to only receive protected.\n9: A->Z: Send P(PVALID message)\n\nThere are alternatives of this, but there appear to be cases where at least one side needs to be able to receive protected, but can't guarantee that all will be protected as there might be unprotected SACK chunks requesting restransmission. And until the next message has been received one can't commit to writing secure as it would cause deadlock. ",
          "createdAt": "2025-07-03T08:41:28Z",
          "updatedAt": "2025-07-03T08:41:28Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> Ok, your clarification around wanting to include the whole set of offered solutions into context of the key derivation makes a difference. It still results in the chunk putting recommendation to the key-management.\n\nI don't understand the last sentence.\n\n> \n> I think what is needed in regards to these proposal is what impact it has to state machine and abstract API functions. [@tuexen](https://github.com/tuexen) can you please put a bit more details into your proposal so that we really can see what it entails and what then ends up being expected to be done by the key-management.\n> \n> I think there is an issue with one line of your strawman:\n> \n> * Once you provided a receive key, no unprotected packets will be processed anymore.\n\nYes, you are right. I need a primitive \"drop unprotected packets from now on\". Sorry for the\nconfusion on my side.\n\nHere is the figure I had in mind (incorrectly):\n```\nRecord 0\n ClientHello\n (epoch=0)\n                            -------->\n                                                     Record 0\n                            <--------       HelloRetryRequest\n                                                    (epoch=0)\n Record 1\n ClientHello                -------->\n (epoch=0)\n                                                     Record 1\n                            <--------             ServerHello\n                                                    (epoch=0)\n                                        {EncryptedExtensions}\n                                                    (epoch=2)\n                                                {Certificate}\n                                                    (epoch=2)\n                                          {CertificateVerify}\n                                                    (epoch=2)\n                                                   {Finished}\n                                                    (epoch=2)\n Record 2\n {Certificate}              -------->\n (epoch=2)\n {CertificateVerify}\n (epoch=2)\n {Finished}\n (epoch=2)\n set recv key\n                                                     Record 2\n                                                     set send/recv key\n                            <--------                   [ACK]\n                                                    (epoch=3)\n drop unprotected\n set send key\n                                                    on sender dry or protected packet\n                                                    drop unprotected\n\n Record 3\n          -------->\n (epoch=3)\n                                                     Record 3\n                            <--------      [Application Data]\n                                                    (epoch=3)\n\n                         Some time later ...\n                 (Post-Handshake Message Exchange)\n                                                     Record 4\n                            <--------      [NewSessionTicket]\n                                                    (epoch=3)\n Record 4\n [ACK]                      -------->\n (epoch=3)\n\n                         Some time later ...\n                           (Rekeying)\n                                                     Record 5\n                            <--------      [Application Data]\n                                                    (epoch=4)\n Record 5\n [Application Data]         -------->\n (epoch=4)\n\n\n```\nI consider the DTLS chunk be only driven by the setting of the send and receive keys and the drop unprotected primitive. This is done by the key management procedure and the key management procedure has to ensure that the receive key is not set before the peer has set the corresponding send key.\n\nFor the DTLS handshake, this means doing these operations during the handshake at specific points.\n\n\n> \n> I think this can result in the deadlock situations unless there is a separate call for moving to require all traffic to be encrypted.\n> \n> The failure case which I don't see working is this: 1: A->Z: DTLS CH 2: Z->A: DTLS SH 3: Z: Can derive both keys, only sets READ as 2 needs to be delivered as plain text. If packet loss of part of (2), SACK will be sent as plain text A->Z. 4: A: Derives Read and Write, sets both ( 5: A->Z: P(DTLS ACK) 6: Z: Sets Write key and locks down receiving unencrypted. 7: Z->A: Send P(PVALID message) 8: A: Locks down to only receive protected. 9: A->Z: Send P(PVALID message)\n> \n> There are alternatives of this, but there appear to be cases where at least one side needs to be able to receive protected, but can't guarantee that all will be protected as there might be unprotected SACK chunks requesting restransmission. And until the next message has been received one can't commit to writing secure as it would cause deadlock.\n\n",
          "createdAt": "2025-07-03T09:11:29Z",
          "updatedAt": "2025-07-03T09:11:29Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Ok, so this moves the handling of the conceptual steps of validation, and controlling the ULP etc to above the API. I will think about more about it. I will note I think this do requires a high level architectural aspect on the implementations in general, and what is expected common behavior between key-management solutions. Especially those that are related to down grade attack protection. \n\n ",
          "createdAt": "2025-07-03T09:48:11Z",
          "updatedAt": "2025-07-03T09:48:11Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "Great. We can also discuss this tomorrow. I'll start writing the API stuff for this. We can always tweak it based on the outcome of the discussion.",
          "createdAt": "2025-07-03T09:54:20Z",
          "updatedAt": "2025-07-03T09:54:20Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "We might want to describe any side conditions for using the API. This would give writers of key management solutions a guidance what to do.",
          "createdAt": "2025-07-03T09:55:05Z",
          "updatedAt": "2025-07-03T09:55:05Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "In the API description we must state that downgrade protection relies on how DTLS Key context are derived, thus the key derivation mechanism needs to use the information about offered and chosen protections in a unique way. This is a requirement for the handshake draft in case someone in the future will write a new one. Proprietary extension may be prone to open a thread attack surface here.\nI think that we need to raise to the SCTP User the responsibility to define which protections are acceptable when creating the association.",
          "createdAt": "2025-07-03T11:00:52Z",
          "updatedAt": "2025-07-03T11:00:52Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOKszxDc64MWEq",
      "title": "DT : Removal of DCI",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/23",
      "state": "CLOSED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From the Design Team : it has been decided to remove the use of DCI from DTLS Chunk header.",
      "createdAt": "2025-05-26T07:03:39Z",
      "updatedAt": "2025-06-05T06:32:13Z",
      "closedAt": "2025-06-05T06:32:13Z",
      "comments": []
    },
    {
      "number": 24,
      "id": "I_kwDOKszxDc64Me6V",
      "title": "DT : Encrypt the INIT Chunk at restart",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/24",
      "state": "CLOSED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From the Design Team : it has been decided that the whole handshake during an SCTP Restart shall be sent using DTLS Chunk, including also INIT/INIT-ACK, encrypted with the Keys previously reserved for SCTP Restart purpose. Those Keys will be derived from the existing DTLS context, removing the need for handshaking a second DTLS context.",
      "createdAt": "2025-05-26T07:23:00Z",
      "updatedAt": "2025-06-05T06:32:13Z",
      "closedAt": "2025-06-05T06:32:13Z",
      "comments": []
    },
    {
      "number": 25,
      "id": "I_kwDOKszxDc64Pj8z",
      "title": "DT : Options in DTLS1.3 Parameter",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/25",
      "state": "CLOSED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gloinul"
      ],
      "labels": [],
      "body": "From the Design Team : DTLS1.3 Parameter in INIT/INIT-ACK Chunk requires supporting options, such as the key management, for instance.",
      "createdAt": "2025-05-26T12:42:13Z",
      "updatedAt": "2025-06-17T11:58:43Z",
      "closedAt": "2025-06-17T11:58:43Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "New parameter values have been implemented in PR #31. ",
          "createdAt": "2025-06-17T11:58:43Z",
          "updatedAt": "2025-06-17T11:58:43Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOKszxDc65mtnA",
      "title": "When performing SCTP Association restart do one reset epoch?",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/27",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "tuexen"
      ],
      "labels": [],
      "body": "Do one reset the DTLS epoch values after an SCTP assocation restart protected by the DTLS chunk?\n\nAs the DTLS 1.3 epoch counter is 64-bit I don't think there are a real issue of running out of space and do not need to be reset for that reason. If one reset the counter, the node not restarting could potentially be forced to overwrite the current epoch. However, the SCTP association restart basically result in a new DTLS key context store, which will initially only contain the restart DTLS context ID. There should be no traffic DTLS key context, these should only be generated after a new DTLS key management invocation. \n\nIf one do not reset the counter then there will be a need to for the key-management on the restarting side to understand that the next epoch value to use is the one used by the restart +1.\n\nDo anyone see issues with reseting epoch on restart?",
      "createdAt": "2025-06-03T13:16:56Z",
      "updatedAt": "2025-06-17T11:59:53Z",
      "closedAt": "2025-06-17T11:59:53Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "As both side knows the restart key used for the restart using restart +1 is actually fine, and might have less overlap issues compared to being on the first epoch and resetting it back and then having to overwrite the restart key used, after having installed the traffic key. In some particular situation we might end up overwriting an existing key in cases if the restart happens in the exact moment the negotiation when the non restarting have managed to install the next key, but not the crashing side. ",
          "createdAt": "2025-06-05T13:09:32Z",
          "updatedAt": "2025-06-05T13:09:32Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Design Team discussion: Assumption will reset it to value=3 after restart. The API needs to take into account that full epoch resets from higher value to a lower. ",
          "createdAt": "2025-06-13T08:57:39Z",
          "updatedAt": "2025-06-13T08:57:39Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Write down API consideration of this. ",
          "createdAt": "2025-06-13T08:58:21Z",
          "updatedAt": "2025-06-13T08:58:21Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Reseting the Epoch has now been implemented by #31 ",
          "createdAt": "2025-06-17T11:59:53Z",
          "updatedAt": "2025-06-17T11:59:53Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOKszxDc6508cU",
      "title": "Should DTLS Chunk update ASCONF (RFC 5061) to not use SCTP-AUTH",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/28",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "gloinul"
      ],
      "labels": [],
      "body": "Currently RFC 5061 require that one uses SCTP-AUTH. The draft is currently proposing that ASCONF RFC could be updated to allow using DTLS chunk if in use instead of SCTP-AUTH. \n\nIf agreeable a new section stating the changes to the RFC 5061 one text should be added. ",
      "createdAt": "2025-06-04T12:29:04Z",
      "updatedAt": "2025-09-04T08:26:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Current comment on this is in https://gloinul.github.io/draft-westerlund-tsvwg-sctp-dtls-chunk/draft-westerlund-tsvwg-sctp-dtls-chunk.html#name-dynamic-address-reconfigura",
          "createdAt": "2025-06-04T12:30:53Z",
          "updatedAt": "2025-06-04T12:30:53Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Discussion: ACONF from new address when encapsulated will not work. Using it encapsulated when just signalling a new address over an existing one will work. Explain this limitation. ",
          "createdAt": "2025-06-13T09:34:07Z",
          "updatedAt": "2025-06-13T09:34:07Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "ASCONF from new address when encapsulated brings the Verification Tag, this can be used for properly addressing the right Association. There's a chance that VTag is not unique, this can be solved either by sending the packet to one of the matching Associations in a sequential mode when the ASCONF for that VTag is received next, or to broadcast the message.\nThe lower part of SCTP doesn't know that the message is ASCONF until it's successfully decrypted and on the other hand broadcasting the message to all the matching Association my open a little chance for Denial Of Service.\nAs a packet not being decrypted will not generate any side effect, I would make as follows:\n1. A packet that has a known VTag but unknown Source Address will be delivered to one of the Association with matching VTag and a sequence will be kept by SCTP to send the retransmission to the next and so on.\n2. If decrypting of the packet resuts in ASCONF, the rfc5061 is followed.\n3. We write in this draft that SCTP-AUTH is not followed. ",
          "createdAt": "2025-09-04T08:26:40Z",
          "updatedAt": "2025-09-04T08:26:40Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOKszxDc651f_I",
      "title": "Update Initilization procedure and state machine.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/29",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "tuexen",
        "teiclap"
      ],
      "labels": [],
      "body": "The description of how the DTLS chunk initilization was agreed to be generalized and thus the interaction with the API functions needs to be updated.\n\nReception Key set: Can receive DTLS chunk from peer will also accept unprotected. \nSend Key set: Will send SCTP packets protected, but still accepts unprotected.\nProtection Established: Protection sending and reception verified, only protected packets established. \n\nThis will interact with the exchange of user level validation data that can only be sent after Send Key Set. Likely this will need to be addressed in combination with #22 update. ",
      "createdAt": "2025-06-04T13:17:24Z",
      "updatedAt": "2025-09-04T11:12:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "I am going to do some work in this, limited to the procedural part, by specifying what kind of traffic is expected during Association's lifetime. ",
          "createdAt": "2025-09-04T11:12:37Z",
          "updatedAt": "2025-09-04T11:12:37Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOKszxDc67yEGw",
      "title": "Define a new PPID used for PVALID message",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/30",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "gloinul"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-16T15:40:34Z",
      "updatedAt": "2025-06-19T13:05:36Z",
      "closedAt": "2025-06-19T13:05:36Z",
      "comments": []
    },
    {
      "number": 32,
      "id": "I_kwDOKszxDc68U8VW",
      "title": "DTLS 1.3 Chunk Protected Association responder including all its supported or just the common subset?",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/32",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "So the initiator of an SCTP Association will inlclude all its Protection Solutions in preference order in its DTLS 1.3 Chunk Protected Association parameter. However, when the responder sends the INIT-ACK and include the parameter should the parameter include:\n\na) All Protection solutions it supports, and have the initiator pick the most preferred in this answer that it supports. Thus enabling the initiator to learn the full capability of the peer. Thus it potentially two disjunct sets could be exchanged.\nb) Only the subset of Protection solutions the responding node support, whit the first being the selected solution.\n\n",
      "createdAt": "2025-06-19T09:20:52Z",
      "updatedAt": "2025-07-04T09:11:12Z",
      "closedAt": "2025-07-04T09:11:12Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "DT meeting on 30th of June. Responder only include what it selected. ",
          "createdAt": "2025-06-30T09:50:20Z",
          "updatedAt": "2025-06-30T09:50:37Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOKszxDc68gGNY",
      "title": "Motivation of SCTP restart",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/34",
      "state": "CLOSED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "teiclap"
      ],
      "labels": [],
      "body": "- Motivation unclear\n- How can the restart key be stored in a secure way\n- Mandatory to implement\n- What happens if not implemented\n\nThis is to be discussed at the next VC.",
      "createdAt": "2025-06-20T09:22:01Z",
      "updatedAt": "2025-07-04T09:13:17Z",
      "closedAt": "2025-07-04T09:13:17Z",
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "I assign this to myself and will work on clarify the motivation.\n\nWe should have an indication whether we support restart or not, so that no attempts for restart are tried if not supported and a new Association is eventually created. Since restart is an important Use Case in 3GPP, we would RECOMMEND it to be implemented.\n\nOn storing the Key Materials in a secure way, this is up to the implementation. It may be stored by the application, by a secure storage service or in any other way.\n\n",
          "createdAt": "2025-06-24T11:47:03Z",
          "updatedAt": "2025-06-24T11:47:03Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "### Motivation for SCTP Restart\n\nIn a hierarchical network, where Central Nodes are connected to access nodes via SCTP Association.\nUsers are tied to access network nodes.\nWhen an access node realizes that the core network node it depends, is not accessible, it must shutdown as it's out of control.\nCentral Nodes are quick at restarting, normally faster than the SCTP supervision time at the access nodes.\nThe SCTP Restart feature is used by Core Network nodes to recover the control on the access nodes so that the Users won't experience the network outage. \nA network outage due to restart of a core network node can potentially impact a very large number of Users.\n",
          "createdAt": "2025-06-24T12:01:59Z",
          "updatedAt": "2025-06-24T12:01:59Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "In DT meeting on the 30th we discussed that the active restarter can be MAY to implement, while the passive side (not actually having lost SCTP assocation) SHALL install the R keys, but do not need to store it outside of the DTLS chunk store. \n\nDocument the fact that old assocation will timeout before new can be created.  ",
          "createdAt": "2025-06-30T09:34:09Z",
          "updatedAt": "2025-06-30T09:34:09Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOKszxDc6-ROis",
      "title": "Padding of SCTP Packets",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/35",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "As both SCTP and DTLS can add padding to achieve a certain packet size I think further text and clarification of this should be added. The following text was present in draft-westerlund-tsvwg-sctp-dtls-handshake but it makes more sense to add it to Chunks instead. Which leads to an additional question if there should be an API function to instruct the DTLS Chunk to always produce a multiple of the set size large DTLS Chunks. \n```\n\nBoth SCTP and DTLS contains mechanisms to padd SCTP payloads, and DTLS\nrecords respectively. If padding of SCTP packets are desired to hide\nactual message sizes it RECOMMEDED to use the SCTP Padding Chunck\n{{RFC4820}} to generate a consistent SCTP payload size. Support of\nthis chunk is only required on the sender side, any SCTP receiver will\nsafely ignore the PAD Chunk. However, if the PAD chunk is not\nsupported DTLS padding MAY be used.\n\nIt needs to be noted that independent if SCTP padding or DTLS padding\nis used the padding is not taken into account by the SCTP congestion\ncontrol. Extensive use of padding has potential for worsen congestion\nsituations as the SCTP association will consume more bandwidth than\nits derived share by the congestion control.\n\nThe use of SCTP PAD chunk is recommened as it at least can enable\nfuture extension or SCTP implementation that account also for the\npadding. Use of DTLS padding hides this packet expansion from SCTP.\n```",
      "createdAt": "2025-07-01T11:59:41Z",
      "updatedAt": "2025-07-04T09:12:38Z",
      "closedAt": "2025-07-04T09:12:38Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "I_kwDOKszxDc6_AjDq",
      "title": "Don't use embedded error cause codes",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/40",
      "state": "OPEN",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen"
      ],
      "labels": [],
      "body": "Right now, the protocol uses a single error cause code, which embeds more specific error causes. I think we should just use a couple or error causes without embedding them, because\n- there is no shortage of error causes\n- this improves consistency with other extensions\n- this fits better in the normal error handing, in particular with the existing API.\n\nAffected sections include section 7.2 and 12.1.\n\nIf we agree on this, I can make the corresponding changes.",
      "createdAt": "2025-07-05T08:44:10Z",
      "updatedAt": "2025-07-07T09:40:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Don't see an issue with this. Before the latest set of changes with more integration we saw a need to be able to extended the extra error causes depending on the key-management. But that should now not exist. ",
          "createdAt": "2025-07-07T08:44:47Z",
          "updatedAt": "2025-07-07T08:44:47Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOKszxDc6_HWeR",
      "title": "Specify chunk flags registry for DTLS chunk",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/41",
      "state": "OPEN",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen",
        "teiclap"
      ],
      "labels": [],
      "body": "Affected Section: 11.3",
      "createdAt": "2025-07-06T10:26:13Z",
      "updatedAt": "2025-09-19T13:47:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "Implemented",
          "createdAt": "2025-09-19T13:47:27Z",
          "updatedAt": "2025-09-19T13:47:27Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOKszxDc6_HXFh",
      "title": "Mandatory Protected Association Parameter Missing",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/42",
      "state": "OPEN",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen",
        "teiclap"
      ],
      "labels": [],
      "body": "I think we can't use the 'Missing Mandatory Parameter' error cause. The parameter is not mandatory but optional to negotiate the extension we are specifying. It is used for missing cookies.",
      "createdAt": "2025-07-06T10:29:27Z",
      "updatedAt": "2025-09-19T08:10:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "I am going to work on that",
          "createdAt": "2025-09-03T07:15:04Z",
          "updatedAt": "2025-09-03T07:15:04Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "We will define a new Error Cause \"Policy not met\". I am working on the text.",
          "createdAt": "2025-09-03T07:29:37Z",
          "updatedAt": "2025-09-03T07:56:17Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "#60 attempt to address this issue.",
          "createdAt": "2025-09-19T08:10:52Z",
          "updatedAt": "2025-09-19T08:10:52Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOKszxDc6_HYvh",
      "title": "Protected restart",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/43",
      "state": "CLOSED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen",
        "teiclap"
      ],
      "labels": [],
      "body": "I think we need to go back to unprotected INIT and INIT ACK chunks. The reason is that the protected INIT chunk would result in an SCTP packet with verification tag 0 but the first chunk not being an INIT chunk.\nThis would violate\n```\nAccordingly, we stress the requirements, as stated in Section 3.1, that\n(1) an INIT chunk MUST NOT be bundled with any other chunk in a packet and \n(2) a packet containing an INIT chunk MUST have a zero Verification Tag.\n```\nfrom [RFC 9260](https://www.rfc-editor.org/rfc/rfc9260.html#section-12.3)",
      "createdAt": "2025-07-06T10:40:51Z",
      "updatedAt": "2025-09-02T14:31:38Z",
      "closedAt": "2025-09-02T14:31:38Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "We are fine with this, as we where fine with it before, only protecting Cookie-Echo and Cookie-ACK\n",
          "createdAt": "2025-07-07T08:48:18Z",
          "updatedAt": "2025-07-07T08:48:18Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi,\nI remember that the proposal of plain INIT/INIT-ACK was long and difficult, and at the end I forgot one of the key reasons ;-)\n\nBefore reverting we may think wider:\n* Have an exemption to the rule, because this is a special-purpose INIT\n* Make use of another RESTART/RESTART-ACK pair of new Chunks\n* Go directly to COOKIE-ECHO/COOKIE-ACK instead of INIT\n\nI'd keep this for an ad hoc discussion.",
          "createdAt": "2025-07-07T17:39:31Z",
          "updatedAt": "2025-07-07T17:39:31Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I wanted we actually discuss this (again). That is why I did not try to fix it before the deadline. This is a detail and I am sure we will agree on a solution.",
          "createdAt": "2025-07-07T17:50:42Z",
          "updatedAt": "2025-07-07T17:50:42Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hi, I remember that the proposal of plain INIT/INIT-ACK was long and difficult, and at the end I forgot one of the key reasons ;-)\n> \n> Before reverting we may think wider:\n> \n> * Have an exemption to the rule, because this is a special-purpose INIT\n\nThat is possible. I just wanted to see if we need this.\n> * Make use of another RESTART/RESTART-ACK pair of new Chunks\n\nI am hesitant to go down that road, since right now I do not see why this complexity is needed.\n> * Go directly to COOKIE-ECHO/COOKIE-ACK instead of INIT\n\nThe question is which cookie to send back. If you cached it, is it still valid (lifetime not expired).\n> \n> I'd keep this for an ad hoc discussion.\n\nI agree.",
          "createdAt": "2025-07-07T17:54:14Z",
          "updatedAt": "2025-07-07T17:54:14Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "So the reason for reverting back to unprotected restart are:\nvtag in init must be 0, thus can't point to the relevant association context and make it through firewalls. Thus, to avoid having impact on this for firewalls we can leave it unprotected. And then perform the mapping the restart anyway requires to the old association and related security context. Then use that to enable encryption using restart context for the association on the cookie echo and cookie ack. ",
          "createdAt": "2025-09-02T13:09:07Z",
          "updatedAt": "2025-09-02T13:09:07Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "@tuexen do you agree that this issue can be closed?",
          "createdAt": "2025-09-02T13:14:42Z",
          "updatedAt": "2025-09-02T13:14:42Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes.",
          "createdAt": "2025-09-02T14:31:38Z",
          "updatedAt": "2025-09-02T14:31:38Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOKszxDc6_Hk9T",
      "title": "Critical Error from DTLS",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/44",
      "state": "OPEN",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "teiclap"
      ],
      "labels": [],
      "body": "I have no idea what this means. It also seems to be an API issue, since it is about the local endpoint.\nEither remove or clarify.",
      "createdAt": "2025-07-06T11:43:50Z",
      "updatedAt": "2025-09-19T08:22:51Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "I think this has become much more contained issue now. Errors in Record Protection operations will need to be gone through to understand what we might expect. I think most will be either ignorable or indicate a configuration failiure.\n",
          "createdAt": "2025-07-07T08:52:14Z",
          "updatedAt": "2025-07-07T08:52:14Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOKszxDc6_JRYr",
      "title": "Consider 32-bit alignment of DTLS chunk",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/45",
      "state": "OPEN",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen"
      ],
      "labels": [],
      "body": "if the decryption is done in place.",
      "createdAt": "2025-07-06T18:46:00Z",
      "updatedAt": "2025-07-07T09:38:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Can you please expand what you mean with this? The DTLS record is one 32-bit word into the DTLS Chunk. The structure of the DTLS record is what is defined within TLS WG, and it might not align in regards to plain text. In general when using AEAD ciphers the protection operation will expand the crypto payload with the auth tag. ",
          "createdAt": "2025-07-07T08:42:42Z",
          "updatedAt": "2025-07-07T08:42:42Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "What I was thinking about is the following:\n* You receive a DTLS chunk and it is 32-bit aligned. So the address it starts is divisible by 4.\n* Then you decrypt the DTLSCiphertext.encrypted_record. It is not yet clear to me, where the DTLSInnerPlaintext is stored. I was thinking if it is possible to store it in the place where the DTLSCiphertext.encrypted_record was stored. This would avoid memory allocations. But I have to figure out how to implement this. However, the resulting chunks in DTLSInnerPlaintext.content needs to be 32-bit aligned. So the address of DTLSInnerPlaintext.content, which is the address of DTLSInnerPlaintext needs to be divisible by 4.\n\nI need to figure out if this \"in place\" decrypt is possible and was wondering how to ensure 32-bit alignment.\nMaybe this is just an implementation issue, maybe we can help by adding some padding somewhere, maybe it is irrelevant. Nothing to address at the moment, but something I need to figure out when implementing it. Therefore, I wanted to make sure I don't forget it.",
          "createdAt": "2025-07-07T09:38:06Z",
          "updatedAt": "2025-07-07T09:38:06Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOKszxDc6_Kaf7",
      "title": "Why is the SHUTDOWN COMPLETE chunk sent unprotected",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/48",
      "state": "CLOSED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen",
        "teiclap"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-07T00:03:04Z",
      "updatedAt": "2025-08-27T08:13:42Z",
      "closedAt": "2025-08-27T08:13:42Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Without diving deeply into RFC 9260. I think my motivation for not protecting this is that there are some cases where you have dropped all main state for an association, and only have a minimal state kept. Thus, I wanted to ensure that in this minimal state case that one can process the packet without having to hand on to the key contexts.\n\nLets looks more closely on this after draft dead line. ",
          "createdAt": "2025-07-07T12:19:26Z",
          "updatedAt": "2025-07-07T12:19:26Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "As the key context exists even after the DTLS connection has been dropped, the SCTP Association has enough information to handle it encrypted. I am going to fix the text about",
          "createdAt": "2025-08-26T10:10:56Z",
          "updatedAt": "2025-08-26T10:10:56Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOKszxDc6_N_UP",
      "title": "Do we need to have API functions for DTLS record size limitation handling?",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/50",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "DTLS can negotiate less than full size DTLS records. Is that needed? And if needed we need API surface for it. \n\nTo be discussed not needed to handled for IETF 123 submission. ",
      "createdAt": "2025-07-07T08:53:27Z",
      "updatedAt": "2025-07-19T14:31:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "So the DTLS negotiation is defined in https://datatracker.ietf.org/doc/html/rfc8449. There is a current Socket API for SCTP that sets MTU for chunks: https://datatracker.ietf.org/doc/html/rfc6458 \n\nSo the SocketAPI may need some clarification to enable restricting the size generate towards the peer to honor RecordSizeLimit. In addtion there is a question if there would be limits on DTLS chunk level that needs to be exposed to the Key-management to correct configure the input to RecordSizeLimit exchange in handshake.",
          "createdAt": "2025-07-19T14:31:57Z",
          "updatedAt": "2025-07-19T14:31:57Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOKszxDc6_OAkU",
      "title": "Need to rename traffic DTLS key context",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/51",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "To avoid confusion with the fact that DTLS uses traffic keys etc, I think we should rename what we call traffic DTLS key context to something else, like primary or main DTLS key context to avoid potential confusion. ",
      "createdAt": "2025-07-07T08:54:49Z",
      "updatedAt": "2025-07-07T12:29:56Z",
      "closedAt": "2025-07-07T12:29:56Z",
      "comments": []
    },
    {
      "number": 56,
      "id": "I_kwDOKszxDc6_Q7uZ",
      "title": "Reference to key management",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/56",
      "state": "OPEN",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tuexen",
        "teiclap"
      ],
      "labels": [],
      "body": "Once the key management document, which is planned to become a WG document, has been submitted, add reference to it. We need to discuss how to deal with references to the Ericsson document.",
      "createdAt": "2025-07-07T12:44:04Z",
      "updatedAt": "2025-09-19T08:30:03Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "I think we can start off with an informational reference for an example of another solution using the DTLS chunk. Closer to the WG last call this can be re-evaluate this. But initially I think there is good for people to be able to have the reference available to an alternative that shows that the DTLS chunk has been defined to work with multiple key-managements.\n",
          "createdAt": "2025-09-02T14:47:10Z",
          "updatedAt": "2025-09-02T14:47:10Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOKszxDc7J3dCD",
      "title": "Around Figure 1 clarify that DTLS is an example of key-management.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/62",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "teiclap"
      ],
      "labels": [],
      "body": "In DTLS chunk the whole key-management function is actually a black box that provides key contexts, may send DATA messages and interacts with the DTLS chunk API. So figure maybe should be simplified for that reason. ",
      "createdAt": "2025-09-05T08:39:47Z",
      "updatedAt": "2025-09-19T07:34:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. There's no reason to show the Handshake and Alert boxes. Since the Handshake is described in another document, only Key Management should exist.\nI am going to implement that.",
          "createdAt": "2025-09-19T07:34:31Z",
          "updatedAt": "2025-09-19T07:34:31Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOKszxDc7Kfhix",
      "title": "Add to Abstact API to modify Assocation UP message to include offered Protection Solution Vector",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/63",
      "state": "OPEN",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [
        "teiclap"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-09T08:28:39Z",
      "updatedAt": "2025-09-19T12:35:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "Rather than modifying the UP indication, I've added a new API for ULP to query about the Protection Solution Vector.",
          "createdAt": "2025-09-19T12:35:18Z",
          "updatedAt": "2025-09-19T12:35:18Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOKszxDc7KktCy",
      "title": "Moving to traffic secret in API or define sn_key in API. ",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/issues/64",
      "state": "OPEN",
      "author": "lxin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "According to https://www.rfc-editor.org/rfc/rfc9147.html#section-4.2.3, it requires 'sn_key' to generate 'Mask' to mask the sequence number for record number encryption. Maybe it should just be included in \"wirte key and iv\", and set it by SCTP_DTLS_SET_SEND_KEYS.",
      "createdAt": "2025-09-09T13:58:03Z",
      "updatedAt": "2025-09-20T04:05:43Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "To my understanding the sn_key is derived from the encrypting side's secret. See further down in the referenced section it states:\n\n    The sn_key is computed as follows:\n\n    [sender]_sn_key = HKDF-Expand-Label(Secret, \"sn\", \"\", key_length)\n\n    [sender] denotes the sending side.\n\nThus, I think no changes are needed. This derivation is part of the implementation of the DTLS record processing.",
          "createdAt": "2025-09-19T08:35:21Z",
          "updatedAt": "2025-09-19T08:35:21Z"
        },
        {
          "author": "lxin",
          "authorAssociation": "NONE",
          "body": "> To my understanding the sn_key is derived from the encrypting side's secret. See further down in the referenced section it states:\n> \n> ```\n> The sn_key is computed as follows:\n> \n> [sender]_sn_key = HKDF-Expand-Label(Secret, \"sn\", \"\", key_length)\n> \n> [sender] denotes the sending side.\n> ```\n> \n> Thus, I think no changes are needed. This derivation is part of the implementation of the DTLS record processing.\n\n@gloinul I don't see how 'Secret' is provided when setting Client/Server Write (transmit) Keying material (Secret is not 'Write Key'), like, when setting Keying material to kernel, How to pass 'Secret' or derived 'sn_key' to kernel? this should be clarified in the doc.",
          "createdAt": "2025-09-19T13:21:52Z",
          "updatedAt": "2025-09-19T13:22:51Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "Okay, I think you are right in that something have to be done here. As we do have a mismatch due to this keying. \n\nSo Section 7.3 of RFC 8446 (TLS 1.3) is defining how one take the traffic secret to derive write_key and write_iv per direction.\n\n> [[sender](https://www.rfc-editor.org/rfc/rfc8446.html#ref-sender)]_write_key = HKDF-Expand-Label(Secret, \"key\", \"\", key_length)\n>   [[sender](https://www.rfc-editor.org/rfc/rfc8446.html#ref-sender)]_write_iv  = HKDF-Expand-Label(Secret, \"iv\", \"\", iv_length)\n>\n>   [sender] denotes the sending side.  The value of Secret for each\n>   record type is shown in the table below.\n>\n>       +-------------------+---------------------------------------+\n>       | Record Type       | Secret                                |\n>       +-------------------+---------------------------------------+\n>       | 0-RTT Application | client_early_traffic_secret           |\n>       |                   |                                       |\n>       | Handshake         | [[sender](https://www.rfc-editor.org/rfc/rfc8446.html#ref-sender)]_handshake_traffic_secret     |\n>       |                   |                                       |\n>       | Application Data  | [[sender](https://www.rfc-editor.org/rfc/rfc8446.html#ref-sender)]_application_traffic_secret_N |\n>       +-------------------+---------------------------------------+\n\nThus to get the client_sn_key one need to traffic secret for the client. \n\nI think this results in that we either need to expand the API as you say to include the client_sn_key and server_sn_key, alternatively we could redefine the API to take a traffic secret, and define that the SCTP chunk implementation under the API will perform the derivations for the write_key, the write_iv (per 7.3 of TLS 1.3) and the sn_key per 4.2.3 (DTLS 1.3).\n\n",
          "createdAt": "2025-09-19T15:01:52Z",
          "updatedAt": "2025-09-19T15:01:52Z"
        },
        {
          "author": "lxin",
          "authorAssociation": "NONE",
          "body": "From kernel's perspective, expanding the API include the client_sn_key and server_sn_key is a better solution than letting kernel perform the derivations of keys. AFAIK, in kTLS, the key derivation is the userspace work.",
          "createdAt": "2025-09-19T15:07:18Z",
          "updatedAt": "2025-09-19T15:07:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think this results in that we either need to expand the API as you say to include the client_sn_key and server_sn_key, alternatively we could redefine the API to take a traffic secret, and define that the SCTP chunk implementation under the API will perform the derivations for the write_key, the write_iv (per 7.3 of TLS 1.3) and the sn_key per 4.2.3 (DTLS 1.3).\n\nYes",
          "createdAt": "2025-09-20T04:05:43Z",
          "updatedAt": "2025-09-20T04:05:43Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOKszxDc5gO-Y_",
      "title": "Update draft-westerlund-tsvwg-sctp-dtls-chunk.md",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/1",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-23T14:10:51Z",
      "updatedAt": "2023-11-23T14:18:05Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4cd2ae0e339297e1da5bd88e2a7c2e21ecbff0b7",
      "headRepository": "emanjon/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "patch-1",
      "headRefOid": "c4722a02812f98ea4e5700d12f1b8cfd69054151",
      "closedAt": "2023-11-23T14:18:01Z",
      "mergedAt": "2023-11-23T14:18:01Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "07c2c4470cb142a1834d35066c214f272ddf7e08"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc5oGkQ-",
          "commit": {
            "abbreviatedOid": "c4722a0"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Did we add an authentication tag?",
          "createdAt": "2023-11-23T14:14:26Z",
          "updatedAt": "2023-11-23T14:14:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOKszxDc5jlCe0",
      "title": "SCTP Restart handling that is secure and efficient using dedicated restart DTLS connection",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/4",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Also contains some other editorial fixes. ",
      "createdAt": "2024-01-09T13:36:24Z",
      "updatedAt": "2024-01-10T15:19:56Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "cba1d0abad19c0b30bb817459b5b2ceac11640d5",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "statemachine",
      "headRefOid": "fe43760acd04d213107f1bdb90696bbfd1e114da",
      "closedAt": "2024-01-10T15:17:40Z",
      "mergedAt": "2024-01-10T15:17:40Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "7f1053654b066545df297270c8b23ad8a9dd5877"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc5r9Hce",
          "commit": {
            "abbreviatedOid": "894a882"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-09T13:47:18Z",
          "updatedAt": "2024-01-09T13:47:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc5r9ICg",
          "commit": {
            "abbreviatedOid": "894a882"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-09T13:48:43Z",
          "updatedAt": "2024-01-09T13:48:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOKszxDc56oYxQ",
      "title": "Issue #10 - described the downgrade towards rfc6083",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/13",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-06T07:46:55Z",
      "updatedAt": "2024-10-04T07:39:50Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "1057dc3016cef4e8e9b8aa86301e7799a4824879",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue10",
      "headRefOid": "67c86ebfdfff62d882c306b27d7dcdbf26e8f55f",
      "closedAt": "2024-10-04T07:39:50Z",
      "mergedAt": "2024-10-04T07:39:50Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "e8afaaf081da54697cce258a06d2891a9ae7099d"
      },
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "This PR now also fixes #12.",
          "createdAt": "2024-09-06T12:30:24Z",
          "updatedAt": "2024-09-06T12:30:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6L6coq",
          "commit": {
            "abbreviatedOid": "67c86eb"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T07:39:34Z",
          "updatedAt": "2024-10-04T07:39:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOKszxDc56oY5K",
      "title": "Issue11",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/14",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-06T07:47:15Z",
      "updatedAt": "2024-10-04T07:42:45Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "1057dc3016cef4e8e9b8aa86301e7799a4824879",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue11",
      "headRefOid": "28a9a4864dc9db87a27d706f6ccec096f298f196",
      "closedAt": "2024-10-04T07:42:44Z",
      "mergedAt": "2024-10-04T07:42:44Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "a56ea81a57c93889937796785ee5031192f12188"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6IeI3x",
          "commit": {
            "abbreviatedOid": "58ce6c8"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I also think there are missing text to make clearify better that when PROTECTED state is entered the endpoint MUST NOT accept plain text chunks. ",
          "createdAt": "2024-09-09T11:14:41Z",
          "updatedAt": "2024-09-09T11:17:28Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "SHALL",
              "createdAt": "2024-09-09T11:14:41Z",
              "updatedAt": "2024-09-09T11:17:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6L6eDF",
          "commit": {
            "abbreviatedOid": "28a9a48"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T07:42:37Z",
          "updatedAt": "2024-10-04T07:42:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOKszxDc57JEWn",
      "title": "Introduced the changes due to issue #7",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/15",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-11T10:35:23Z",
      "updatedAt": "2024-10-04T07:46:57Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "1057dc3016cef4e8e9b8aa86301e7799a4824879",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue7",
      "headRefOid": "aab1ce30e98d4e2eab50f9e5ca756d42a6846b7f",
      "closedAt": "2024-10-04T07:46:57Z",
      "mergedAt": "2024-10-04T07:46:57Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "4f0cdf391731faec50112afa09f668d2eeb151e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6L6f7w",
          "commit": {
            "abbreviatedOid": "aab1ce3"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T07:46:43Z",
          "updatedAt": "2024-10-04T07:46:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOKszxDc5-Lq_Y",
      "title": "API AEAD limit considerations",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/16",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#8",
      "createdAt": "2024-10-10T08:17:02Z",
      "updatedAt": "2024-10-10T08:31:21Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "8e1d5cdb58532c2f1840ec3f8461b9c32c0ba427",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "API-AEAD-limit-considerations",
      "headRefOid": "39d0cf96b7975a7457378ab94663ab0ae6c1fafb",
      "closedAt": "2024-10-10T08:31:21Z",
      "mergedAt": "2024-10-10T08:31:21Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "4522cae6e59e25db4d980aa5135c7a4199e940c4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6MoqzE",
          "commit": {
            "abbreviatedOid": "39d0cf9"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-10T08:20:11Z",
          "updatedAt": "2024-10-10T08:20:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOKszxDc5-L_tz",
      "title": "Privacy Considerations",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/17",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#9",
      "createdAt": "2024-10-10T08:55:00Z",
      "updatedAt": "2024-10-10T09:03:58Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4522cae6e59e25db4d980aa5135c7a4199e940c4",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "Privacy-Considerations",
      "headRefOid": "010ac9cfe25ccf4fe65c8725322fa43910efd395",
      "closedAt": "2024-10-10T09:03:58Z",
      "mergedAt": "2024-10-10T09:03:58Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "4ef02a6dbb55f1354cdf30727fd91095afa35845"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6MpCB6",
          "commit": {
            "abbreviatedOid": "010ac9c"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-10T08:58:00Z",
          "updatedAt": "2024-10-10T08:58:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOKszxDc5_Geoz",
      "title": "Various edits to address inconsistencies and improve the text. ",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/18",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-18T12:59:27Z",
      "updatedAt": "2024-10-21T12:21:50Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4ef02a6dbb55f1354cdf30727fd91095afa35845",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "mw-edits",
      "headRefOid": "b5d5f368282126839f9e4aae75687d7930c1c727",
      "closedAt": "2024-10-21T12:21:45Z",
      "mergedAt": "2024-10-21T12:21:45Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "ca13c0c5784452f7eeaa3e333c963c74aeae3d83"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6Nvon4",
          "commit": {
            "abbreviatedOid": "1d33b3e"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T13:26:12Z",
          "updatedAt": "2024-10-18T13:26:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6Nvowm",
          "commit": {
            "abbreviatedOid": "1d33b3e"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T13:26:26Z",
          "updatedAt": "2024-10-18T13:26:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6NvpY6",
          "commit": {
            "abbreviatedOid": "1d33b3e"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T13:27:34Z",
          "updatedAt": "2024-10-18T13:27:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6Nvpw4",
          "commit": {
            "abbreviatedOid": "1d33b3e"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Shouldn't be \"finally\"?",
          "createdAt": "2024-10-18T13:28:12Z",
          "updatedAt": "2024-10-18T13:28:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6NvqxN",
          "commit": {
            "abbreviatedOid": "1d33b3e"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Line 985 : PROTECTION INITILIZATION is PROTECTION INITIALIZATION",
          "createdAt": "2024-10-18T13:29:55Z",
          "updatedAt": "2024-10-18T13:29:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6NvtuH",
          "commit": {
            "abbreviatedOid": "b5d5f36"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T13:35:08Z",
          "updatedAt": "2024-10-18T13:35:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6N-MFp",
          "commit": {
            "abbreviatedOid": "b5d5f36"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-21T12:20:48Z",
          "updatedAt": "2024-10-21T12:20:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOKszxDc6NIXq7",
      "title": "Added a limit to PVALID of no more than 32 four\u2026",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/20",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "\u2026-byte words, i.e. a maximum of 1024 possible solutions can be indicated. This addresses issue #19 ",
      "createdAt": "2025-03-03T10:37:33Z",
      "updatedAt": "2025-03-03T16:35:27Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "911576c0af0920a516e9cf8bbf6cf628431bb621",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "gloinul-issue-19",
      "headRefOid": "2eed1415393773413aa9a1046fb0d17064ce8d78",
      "closedAt": "2025-03-03T16:35:27Z",
      "mergedAt": "2025-03-03T16:35:26Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "4ec80f96b00b8c7e43e1bcac049dce09ba0af5c2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6eLbpe",
          "commit": {
            "abbreviatedOid": "2eed141"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T11:03:20Z",
          "updatedAt": "2025-03-03T11:03:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOKszxDc6NJzAV",
      "title": "Describing implementation challenges with key related state between chunk and handshake protection operations. ",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/21",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T13:28:41Z",
      "updatedAt": "2025-03-03T16:35:12Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "911576c0af0920a516e9cf8bbf6cf628431bb621",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "mw-edits-122",
      "headRefOid": "a7811649e8ee08e0152d7992558a42143eb6c408",
      "closedAt": "2025-03-03T16:35:12Z",
      "mergedAt": "2025-03-03T16:35:12Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "f12cf2ccbe2bec2bce6c4685e2c48edf5ac7085b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6eM8nB",
          "commit": {
            "abbreviatedOid": "cf41308"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "There are a few typos:\r\nLine 1350 : primiarily --> primarily \r\n1351 : reside --> resides\r\n1356 : include --> includes\r\n1364 : are very few --> is very limited\r\n1365 : \"the when\" --> when\r\n ",
          "createdAt": "2025-03-03T13:54:34Z",
          "updatedAt": "2025-03-03T13:54:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOKszxDc6Xt1Ez",
      "title": "Removal of DCI and updated related restart identification ",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/26",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #23 and #24.\r\n\r\nRemoved DCI and fixed the relevant side effects.",
      "createdAt": "2025-05-27T05:58:12Z",
      "updatedAt": "2025-06-05T06:32:12Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "cd4c99c0484ec898361bf880b430165a2516633e",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue_23",
      "headRefOid": "d9d1bc9b593360394d9bfdc59aec61740105f7da",
      "closedAt": "2025-06-05T06:32:12Z",
      "mergedAt": "2025-06-05T06:32:12Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "49a4260bbffd15bb85b7f59e739aed830c183181"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6rGx8w",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-05-27T11:24:13Z",
          "updatedAt": "2025-05-27T11:54:18Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think this should be done, but is related to association restart. ",
              "createdAt": "2025-05-27T11:24:13Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 30,
              "body": "Potential grammatical issue \"those connection\". However, I think we need to agree on a term for what a key + plus rest of context should be called. It is not a full DTLS connection. DTLS key context? A DTLS Key Context is the state related to a specific set of keys, the replay window, next DTLS sequence number, and its identifying values: Restart bit, DTLS connection ID (If used), and epoch. ",
              "createdAt": "2025-05-27T11:28:33Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 30,
              "body": "Note, I think the definition I write above should be added elsewhere and used here instead of connection. ",
              "createdAt": "2025-05-27T11:29:04Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 59,
              "body": "I think instead of using /, list all chunk types in a comma separated list. Also rewrite using \"restart DTLS key context\". ",
              "createdAt": "2025-05-27T11:34:17Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 62,
              "body": "I think you need to expand this to say: A DTLS Chunk using the restart DTLS key context is identified ... then remove the tail end \"in the DTLS chunk\"",
              "createdAt": "2025-05-27T11:36:51Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 80,
              "body": "I think this should use [DTLS CHUNK(INIT)] and [DTLS CHUNK(INIT-ACK)]",
              "createdAt": "2025-05-27T11:38:21Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 153,
              "body": "I don't think we should redefine the Chunk Length, even if it is the only Chunk we should ever see on this level. The sum of the chunk length fields are the valid SCTP packet length. Although one might derive this length from the IP header I wonder if it is smart to redefine the field. ",
              "createdAt": "2025-05-27T11:45:25Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 177,
              "body": "With the new derivation based solution, I think we expect the restart keys to be configured as soon as the main keys have been installed for each direction. ",
              "createdAt": "2025-05-27T11:47:09Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 177,
              "body": "So I think this happens earlier than PROTECTED state. We might need to rework the state machine transitions slightly. ",
              "createdAt": "2025-05-27T11:47:49Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            },
            {
              "originalPosition": 292,
              "body": "The API may need to be clarified that a given key are valid for the combination of (SCTP association, DTLS Connection ID (if used), epoch and restart bit). ",
              "createdAt": "2025-05-27T11:51:35Z",
              "updatedAt": "2025-05-27T11:54:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHIrt",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T11:56:53Z",
          "updatedAt": "2025-05-27T11:56:53Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "You are right, there are no connections, those are Keys",
              "createdAt": "2025-05-27T11:56:53Z",
              "updatedAt": "2025-05-27T11:56:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHLAT",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:00:17Z",
          "updatedAt": "2025-05-27T12:00:17Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I think we should use the word context, as it is not only keys, there are the replay window, latest used sequence number as well as the context identifiers. ",
              "createdAt": "2025-05-27T12:00:17Z",
              "updatedAt": "2025-05-27T12:00:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHMTF",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:02:15Z",
          "updatedAt": "2025-05-27T12:02:15Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "MT was quite peculiar on removing this. We can talk about",
              "createdAt": "2025-05-27T12:02:15Z",
              "updatedAt": "2025-05-27T12:02:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHM7B",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:03:13Z",
          "updatedAt": "2025-05-27T12:03:14Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "We have some work to do here, agree. I am not changing this for now but we know that Keys are derived at once and the state machine requires fine tuning",
              "createdAt": "2025-05-27T12:03:13Z",
              "updatedAt": "2025-05-27T12:03:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHO4E",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:06:01Z",
          "updatedAt": "2025-05-27T12:06:01Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "But isn't it context a word with a precise semantic in DTLS? I have nothing against context, as long as it makes easier reading",
              "createdAt": "2025-05-27T12:06:01Z",
              "updatedAt": "2025-05-27T12:06:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHblz",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:23:09Z",
          "updatedAt": "2025-05-27T12:23:10Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "I think we have to ask him, I don't remember him talking about redefining the chunk length field. He tried to optimize things. The length field in the DTLS record is optional, and should never be needed when using DTLS chunk as the DTLS chunk length field exists. There is a clear downside I think to make the DTLS chunk field not match the standard definition. Any firewall that sees a length field that is zero while the actual length is non-zero will react to the packet being errnous and might discard it. ",
              "createdAt": "2025-05-27T12:23:09Z",
              "updatedAt": "2025-05-27T12:23:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHlLI",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:35:07Z",
          "updatedAt": "2025-05-27T12:35:08Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Regarding the DTLS 1.3 specification. The word context is used only three times, where one is part of a reference. So I think it is fine to define \"DTLS Key Context\" having the meaning we want it to have here to use the DTLS record like in a DTLS connection.\r\n",
              "createdAt": "2025-05-27T12:35:07Z",
              "updatedAt": "2025-05-27T12:35:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHoIk",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:37:21Z",
          "updatedAt": "2025-05-27T12:37:21Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "This is a good point.",
              "createdAt": "2025-05-27T12:37:21Z",
              "updatedAt": "2025-05-27T12:37:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHoo-",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:37:37Z",
          "updatedAt": "2025-05-27T12:37:38Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "I am restoring the length",
              "createdAt": "2025-05-27T12:37:37Z",
              "updatedAt": "2025-05-27T12:37:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6rHqTn",
          "commit": {
            "abbreviatedOid": "f44393b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-27T12:39:10Z",
          "updatedAt": "2025-05-27T12:39:10Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Then let's have it added in the definition.\r\nDTLS Key Context is the set of data defining a Key and it's applicability, such as epoch, sequence number etc.",
              "createdAt": "2025-05-27T12:39:10Z",
              "updatedAt": "2025-05-27T12:39:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6sy7bW",
          "commit": {
            "abbreviatedOid": "d9d1bc9"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-05T06:31:53Z",
          "updatedAt": "2025-06-05T06:31:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOKszxDc6aviLn",
      "title": "Change PVALID to message update parameter to use Protection Solution Identifiers.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/31",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Resolves issue #22\r\nResolves issue #25 \r\nPartially implemented #27 ",
      "createdAt": "2025-06-16T15:43:58Z",
      "updatedAt": "2025-06-17T11:57:55Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "49a4260bbffd15bb85b7f59e739aed830c183181",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue22",
      "headRefOid": "adbadb4768b93ed176cf7a7095f871342f9d3d3e",
      "closedAt": "2025-06-17T11:57:54Z",
      "mergedAt": "2025-06-17T11:57:54Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "10527cd9e37fad30fce9b6e07764a24ecd8519f1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6u5dhh",
          "commit": {
            "abbreviatedOid": "09c7bc8"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Line 396 to 398 :The SCTP Restart handshakes INIT, INIT-ACK, COOCKIE-ECHO, COOKIE-ACK\r\nexactly as in legacy SCTP Restart case; these Chunks SHALL be\r\nsent as DTLS chunk protected using the restart DTLS key context.\r\n\r\nLine 402\r\n{{sctp-DTLS-chunk-newchunk-crypt-struct}}).  There's exactly one\r\nactive Restart Key at a time, the newest. However, a crash at the\r\npoint having completed the key-management exchange but failing to\r\nshould be:\r\n{{sctp-DTLS-chunk-newchunk-crypt-struct}}).  There's exactly one\r\nactive Restart DTLS Context at a time, the newest. However, a crash at the\r\npoint having completed the key-management exchange but failing to\r\n\r\nLine 405 \r\ncommit the key material to secure storage could result in lost of the\r\nlatest key. Therefore, the endpoints SHOULD retain the old restart\r\nshould be\r\ncommit the DTLS Key Context to secure storage could result in lost of the\r\nlatest DTLS Key Context . Therefore, the endpoints SHOULD retain the old restart\r\n\r\nLine 423 \r\nA restarted SCTP Association SHALL continue to use the Restart Key,\r\nfor User Traffic until a new traffic DTLS Key will be available.  The\r\nshould be\r\nA restarted SCTP Association SHALL continue to use the Restart DTLS Key Context,\r\nfor User Traffic until a new traffic DTLS Key Context will be available.  The\r\n\r\nLine 493\r\nRestart Key is available is kept to a minimum. Note that another\r\nshould be\r\nRestart DTLS Key Context is available is kept to a minimum. Note that another\r\n\r\nLine 448\r\nvalid packets. After having derived new traffic keys the endpoint\r\ninstalls the traffic key first, and start using it.  The new restart\r\nkey is only installed after any old in-flight restart packets have had\r\na chance to be received.\r\nshould be\r\nvalid packets. After having derived new traffic keys the endpoint\r\ninstalls the Traffic DTLS Key Context first, and start using it.  The new restart\r\nDTLS Key Context is only installed after any old in-flight restart packets have had\r\na chance to be received.\r\n\r\nLine 501 : shouldn't at least one Protection Solution exist?\r\n\r\nLine 629 : rather than set, I think we should use \"sequence\"\r\n\r\nLine 839 : aren't we setting a DTLS Key Context rather than individual keys? \r\n\r\nLine 852: \r\nparameter is sent in the INIT-ACK, otherwise it will reply with an\r\nshould be\r\nparameter sent in the INIT-ACK, otherwise it will reply with an\r\n\r\nLine 1397\r\nSolutions\". This regsitry is part of the of the Stream\r\nshould be\r\nSolutions\". This registry is part of the of the Stream\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2025-06-17T06:31:18Z",
          "updatedAt": "2025-06-17T06:31:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6u5pHH",
          "commit": {
            "abbreviatedOid": "09c7bc8"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Line 476:\r\n  plus 4 and if N is odd plus 2 bytes of padding.\r\nshould be\r\n  plus 4 and, if N is odd, plus 2 bytes of padding.\r\n\r\nLine 487 and 682\r\nPadding: If the number of included Protection solutions are odd the\r\nshould be\r\nPadding: If the number of included Protection solutions is odd the\r\n\r\n",
          "createdAt": "2025-06-17T06:47:58Z",
          "updatedAt": "2025-06-17T06:47:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOKszxDc6bQbG7",
      "title": "Adding PPID for PVALID, some other fixes related to PVALID.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/33",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "resolves #30. ",
      "createdAt": "2025-06-19T13:03:31Z",
      "updatedAt": "2025-06-19T13:14:40Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "10527cd9e37fad30fce9b6e07764a24ecd8519f1",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "pvalid-pip",
      "headRefOid": "ae0b5b719e2c7a8c3731c320e5205883f1628761",
      "closedAt": "2025-06-19T13:05:35Z",
      "mergedAt": "2025-06-19T13:05:35Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "3873b4ed51d70c3737f23212c6a5c373dcc30541"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6vamAb",
          "commit": {
            "abbreviatedOid": "ae0b5b7"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Made some spelling changes",
          "createdAt": "2025-06-19T13:14:40Z",
          "updatedAt": "2025-06-19T13:14:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOKszxDc6dCP1x",
      "title": "Update of SCTP Restart to address Issue34",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/36",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Redesign of SCTP Restart",
      "createdAt": "2025-07-02T07:51:25Z",
      "updatedAt": "2025-07-04T09:13:16Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "910e92c112960e302c295b29491c30b36c35d1b5",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue34",
      "headRefOid": "e9bc207cc1f87c5294ba9114407fc1fbc97eaaee",
      "closedAt": "2025-07-04T09:13:16Z",
      "mergedAt": "2025-07-04T09:13:16Z",
      "mergedBy": "tuexen",
      "mergeCommit": {
        "oid": "9a058512139fac9c748cb26649648002cd4bdf05"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6xwr3L",
          "commit": {
            "abbreviatedOid": "8e719c4"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-03T08:55:00Z",
          "updatedAt": "2025-07-03T08:55:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOKszxDc6dOtEP",
      "title": "Added text on privacy padding in the chunk.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/37",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Resolves #35 ",
      "createdAt": "2025-07-03T09:07:21Z",
      "updatedAt": "2025-07-04T09:12:33Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "d54202762f3aa95d09dc6d2c54ae29dfce0562f2",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "padding-issue35",
      "headRefOid": "92c9a03b142b09b8c3ed810fb7060b62de837d97",
      "closedAt": "2025-07-04T09:12:33Z",
      "mergedAt": "2025-07-04T09:12:33Z",
      "mergedBy": "tuexen",
      "mergeCommit": {
        "oid": "682444bd6fa4482f28f9be5bcdea3f1083c9f85e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6xw303",
          "commit": {
            "abbreviatedOid": "a17cd55"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-03T09:10:32Z",
          "updatedAt": "2025-07-03T09:10:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOKszxDc6dO-B-",
      "title": "Only include selected PSI in INIT-ACK and Fixed error handling for when no common PSI exist.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/38",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This both resolves the description to only include the selected one in the responders parameter. It also added error handling in case no common PSI exists. \r\n\r\nResolves #32 ",
      "createdAt": "2025-07-03T09:32:11Z",
      "updatedAt": "2025-07-04T09:11:11Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "247b28f30813cc78c51ddb114916a5087b43ad22",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue32",
      "headRefOid": "0d9c23c20b52067c7492241d09fb37853528a3c6",
      "closedAt": "2025-07-04T09:11:11Z",
      "mergedAt": "2025-07-04T09:11:11Z",
      "mergedBy": "tuexen",
      "mergeCommit": {
        "oid": "e6c713c23bc5f8ea10673cf18cb1c465eb58e894"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6xxzF9",
          "commit": {
            "abbreviatedOid": "0d9c23c"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-03T10:23:54Z",
          "updatedAt": "2025-07-03T10:23:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOKszxDc6dVAoQ",
      "title": "cleanup: remove non specific text",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/39",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think thread safety is not specific to this extension. It applies to an SCTP implementation in general and also seem implementation specific to me.",
      "createdAt": "2025-07-03T20:02:37Z",
      "updatedAt": "2025-07-04T06:52:22Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "247b28f30813cc78c51ddb114916a5087b43ad22",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "cleanup-1",
      "headRefOid": "77d550f15b0cf8783b87fa7d1b0b5986da942384",
      "closedAt": "2025-07-04T06:52:22Z",
      "mergedAt": "2025-07-04T06:52:22Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "d54202762f3aa95d09dc6d2c54ae29dfce0562f2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6x9Wwu",
          "commit": {
            "abbreviatedOid": "77d550f"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-04T05:34:00Z",
          "updatedAt": "2025-07-04T05:34:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6x99FB",
          "commit": {
            "abbreviatedOid": "77d550f"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-04T06:52:16Z",
          "updatedAt": "2025-07-04T06:52:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOKszxDc6dpyju",
      "title": "Remove pvalid and describe handling of DTLS chunk",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/46",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-06T20:14:18Z",
      "updatedAt": "2025-07-07T08:38:45Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "f0b3bc2329a9cc9eff276472389bb4aea47d4cc1",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "remove-pvalid",
      "headRefOid": "113efe5553a0530b6c7c16ad0a480c94ff30b399",
      "closedAt": "2025-07-07T08:38:45Z",
      "mergedAt": "2025-07-07T08:38:45Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "58e8d0d6e4511750dab77683a0c9da55ab3d9e3f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6yWWfr",
          "commit": {
            "abbreviatedOid": "113efe5"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T05:22:54Z",
          "updatedAt": "2025-07-07T05:22:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6yYfR2",
          "commit": {
            "abbreviatedOid": "113efe5"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T08:37:06Z",
          "updatedAt": "2025-07-07T08:37:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 47,
      "id": "PR_kwDOKszxDc6dp8-Q",
      "title": "Add skeleton for the socket API",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/47",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-06T21:04:39Z",
      "updatedAt": "2025-07-07T08:38:56Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "f0b3bc2329a9cc9eff276472389bb4aea47d4cc1",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "socketapi",
      "headRefOid": "66cad698d63af030025522e9dbd83ee38b686023",
      "closedAt": "2025-07-07T08:38:56Z",
      "mergedAt": "2025-07-07T08:38:56Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "8313a1c06bdad9c9d751578b0b84cb0497dc5521"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6yWW8M",
          "commit": {
            "abbreviatedOid": "66cad69"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T05:23:59Z",
          "updatedAt": "2025-07-07T05:23:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6yYfow",
          "commit": {
            "abbreviatedOid": "66cad69"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T08:37:34Z",
          "updatedAt": "2025-07-07T08:37:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOKszxDc6dqhcl",
      "title": "Provide an update using DTLS for key management",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/49",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-07T00:12:39Z",
      "updatedAt": "2025-07-07T08:39:09Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "f0b3bc2329a9cc9eff276472389bb4aea47d4cc1",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "update-overview",
      "headRefOid": "8ba38a28f0df5b1b80140a86f3f3944ca9986d8c",
      "closedAt": "2025-07-07T08:39:09Z",
      "mergedAt": "2025-07-07T08:39:09Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "2f4b4f7722de69b33a527fa2c3c78613b11108f5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6yWbkA",
          "commit": {
            "abbreviatedOid": "8ba38a2"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T05:34:14Z",
          "updatedAt": "2025-07-07T05:34:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6yYgVx",
          "commit": {
            "abbreviatedOid": "8ba38a2"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T08:38:33Z",
          "updatedAt": "2025-07-07T08:38:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOKszxDc6dvLwb",
      "title": "Fixed the relevant findings",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/52",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I did some check and fixed mostly minor parts.",
      "createdAt": "2025-07-07T11:11:39Z",
      "updatedAt": "2025-07-07T11:48:16Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "2f4b4f7722de69b33a527fa2c3c78613b11108f5",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "edit0707",
      "headRefOid": "2c74c3f59b54621071f28817044bf9a6c84d4132",
      "closedAt": "2025-07-07T11:48:16Z",
      "mergedAt": "2025-07-07T11:48:16Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "c320ba20892c191af5be758bf1c94f741d7777f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6ya6Iw",
          "commit": {
            "abbreviatedOid": "ffcb7c0"
          },
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-07T11:31:24Z",
          "updatedAt": "2025-07-07T11:31:25Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would prefer `keys` here, since this is what is sent down. ",
              "createdAt": "2025-07-07T11:31:25Z",
              "updatedAt": "2025-07-07T11:31:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6ya8si",
          "commit": {
            "abbreviatedOid": "ffcb7c0"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-07T11:34:15Z",
          "updatedAt": "2025-07-07T11:34:15Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "The text is about API, that is not in the figure. I am OK in fixing the text instead of the figure.\r\nI can do that, here and there we talk about keying.",
              "createdAt": "2025-07-07T11:34:15Z",
              "updatedAt": "2025-07-07T11:38:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6ybBMe",
          "commit": {
            "abbreviatedOid": "ffcb7c0"
          },
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-07T11:39:21Z",
          "updatedAt": "2025-07-07T11:39:22Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Whenever I put some text next to an arrow, the text describes what is sent. Like PPID, ContentType of keys. So please fix the text instead of the figure.",
              "createdAt": "2025-07-07T11:39:21Z",
              "updatedAt": "2025-07-07T11:39:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKszxDc6ybKB_",
          "commit": {
            "abbreviatedOid": "2c74c3f"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T11:46:49Z",
          "updatedAt": "2025-07-07T11:46:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOKszxDc6dv5ml",
      "title": "Renaming to Primary DTLS key context",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/53",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Resolving #issue51. Renaming traffic DTLS key context to Primary key context. Also adding a Abstract API function for requiring protected packets.",
      "createdAt": "2025-07-07T12:14:38Z",
      "updatedAt": "2025-07-07T12:29:55Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "c320ba20892c191af5be758bf1c94f741d7777f4",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue51",
      "headRefOid": "4f95b0c4d116a0f30d106e341e7044eb55ba9903",
      "closedAt": "2025-07-07T12:29:55Z",
      "mergedAt": "2025-07-07T12:29:55Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "ce837f62f2c29fcd477fc1b1b5e770b209d8ea44"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6yblIu",
          "commit": {
            "abbreviatedOid": "4f95b0c"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T12:17:01Z",
          "updatedAt": "2025-07-07T12:17:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6ybxez",
          "commit": {
            "abbreviatedOid": "4f95b0c"
          },
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T12:29:45Z",
          "updatedAt": "2025-07-07T12:29:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOKszxDc6dv9PI",
      "title": "Add me as a co-author and give credit to Hannes and Tiru.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/54",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-07T12:19:45Z",
      "updatedAt": "2025-07-07T12:29:34Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "c320ba20892c191af5be758bf1c94f741d7777f4",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "add-me-as-coauthor",
      "headRefOid": "13d0e946dc30ef11858c9ea9098e03d426227bfe",
      "closedAt": "2025-07-07T12:29:34Z",
      "mergedAt": "2025-07-07T12:29:34Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "20d09c161db5e0ad652d4b7d735e370881506eec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6ybqxa",
          "commit": {
            "abbreviatedOid": "13d0e94"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T12:21:52Z",
          "updatedAt": "2025-07-07T12:21:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6ybxQ-",
          "commit": {
            "abbreviatedOid": "13d0e94"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T12:29:26Z",
          "updatedAt": "2025-07-07T12:29:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOKszxDc6dwOnh",
      "title": "Describe key management.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/55",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-07T12:42:38Z",
      "updatedAt": "2025-07-07T13:09:36Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "ce837f62f2c29fcd477fc1b1b5e770b209d8ea44",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "improve-key-management",
      "headRefOid": "02207549a3b9c27b5384877c782321461863e5f9",
      "closedAt": "2025-07-07T13:09:36Z",
      "mergedAt": "2025-07-07T13:09:36Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "22c63eed438eaf2fc4e9e063828b7b43bd16cf50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6ycCyZ",
          "commit": {
            "abbreviatedOid": "0220754"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T12:46:34Z",
          "updatedAt": "2025-07-07T12:46:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc6ycZdh",
          "commit": {
            "abbreviatedOid": "0220754"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T13:09:29Z",
          "updatedAt": "2025-07-07T13:09:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOKszxDc6dxlLc",
      "title": "Editorial pass to align language and remove furhter irrelvant text and correct other.",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/57",
      "state": "MERGED",
      "author": "gloinul",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-07T14:34:22Z",
      "updatedAt": "2025-07-07T16:55:16Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "22c63eed438eaf2fc4e9e063828b7b43bd16cf50",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "edits0707",
      "headRefOid": "4ab551bd30f8bf7970ba40e66f75a5cfffa1b295",
      "closedAt": "2025-07-07T16:55:11Z",
      "mergedAt": "2025-07-07T16:55:11Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "a85766d34f2b15fe19f86ba201787eaa9586346e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6yelrs",
          "commit": {
            "abbreviatedOid": "4ab551b"
          },
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-07T15:32:09Z",
          "updatedAt": "2025-07-07T15:32:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOKszxDc6lYN9V",
      "title": "Issue #43: Reverted to use unencrypted INIT/INIT-ACK for Restart",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/58",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-08-26T10:08:23Z",
      "updatedAt": "2025-08-27T08:13:17Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4fd27cf956ab0a103b0279a4c46b05b1e4107f00",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue43",
      "headRefOid": "822436a81bb996fee1ef9afd11b240965b1636f0",
      "closedAt": "2025-08-27T08:13:17Z",
      "mergedAt": "2025-08-27T08:13:17Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "4336c3beb26e1526aa82e8e57626ddd68f97a1f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc68RF5W",
          "commit": {
            "abbreviatedOid": "46e6f5f"
          },
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T07:04:34Z",
          "updatedAt": "2025-08-27T07:04:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOKszxDc6lYdI5",
      "title": "Fixed issue #48 in the text",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/59",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-08-26T10:31:54Z",
      "updatedAt": "2025-08-27T07:33:17Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "eabb4b5102c6a6c83c2dd958b28086961c8f9d3e",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue48",
      "headRefOid": "83e73247bda71bca04280d804f2c7d7d77282d1c",
      "closedAt": "2025-08-27T07:33:17Z",
      "mergedAt": "2025-08-27T07:33:17Z",
      "mergedBy": "gloinul",
      "mergeCommit": {
        "oid": "4fd27cf956ab0a103b0279a4c46b05b1e4107f00"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc68LRTd",
          "commit": {
            "abbreviatedOid": "63259cd"
          },
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-26T19:41:36Z",
          "updatedAt": "2025-08-26T19:41:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKszxDc68RBxb",
          "commit": {
            "abbreviatedOid": "63259cd"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T06:59:22Z",
          "updatedAt": "2025-08-27T06:59:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOKszxDc6mmLxr",
      "title": "New \"Policy not met\" ERROR when parameter missing",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/60",
      "state": "OPEN",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-03T08:12:29Z",
      "updatedAt": "2025-09-03T13:33:43Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "443522c5dac9f777ead1f45efd2e26bbbbe2638a",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue42",
      "headRefOid": "0fa1650001e68bf9bb783d2c4bf711b3bb135bce",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "This commit also fixes the issue #40 ",
          "createdAt": "2025-09-03T08:33:23Z",
          "updatedAt": "2025-09-03T08:33:23Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "Question: What is the intended behavior if one side wants to use the DTLS chunk and the other not? I see two options:\r\n1. Get the association up and the application decide whether it is acceptable to continue without the protection or not.\r\n2. Ensure that the SCTP layer prohibits the establishment of the association.\r\nIf we can to use the second option, the response to an INIT chunk can't be an ERROR chunk but must be an ABORT chunk.",
          "createdAt": "2025-09-03T11:33:09Z",
          "updatedAt": "2025-09-03T11:33:09Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "> Question: What is the intended behavior if one side wants to use the DTLS chunk and the other not? I see two options:\r\n> \r\n> 1. Get the association up and the application decide whether it is acceptable to continue without the protection or not.\r\n> 2. Ensure that the SCTP layer prohibits the establishment of the association.\r\n>    If we can to use the second option, the response to an INIT chunk can't be an ERROR chunk but must be an ABORT chunk.\r\n\r\nI was wondering if the correct behavior would rather be that if the Endpoint doesn't accept unprotected INIT, it may silently discard it.\r\n\r\nAnyhow I don't support 1. I can easily fix 2.",
          "createdAt": "2025-09-03T11:38:04Z",
          "updatedAt": "2025-09-03T11:38:04Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "This is where the server endpoint should have a policy set that determine if the ULP requires DTLS security or can accept no security or some other fallback. So if not required the association should be established without the DTLS chunk, if required then the policy not meet error should be returned. \r\n\r\n",
          "createdAt": "2025-09-03T11:39:12Z",
          "updatedAt": "2025-09-03T11:39:12Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "I would also note that we need too be able to return both \"Policy not met\", \"No common protection solution\" as the later issue triggers the first. Where the later can if there is no require DTLS Chunk policy is in place can be returned as just an error to indicate why DTLS chunk was not returned, but the association can be established. ",
          "createdAt": "2025-09-03T11:42:32Z",
          "updatedAt": "2025-09-03T11:45:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 61,
      "id": "PR_kwDOKszxDc6m2hxC",
      "title": "Issue29 - Clarify interactions with higher layers. ",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/61",
      "state": "OPEN",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added a description on how to deal with plain text messages.\r\nAdded references to the INIT parameter list in the abstract API.\r\n\r\nWe may not need any State Machine to be added.",
      "createdAt": "2025-09-04T12:45:58Z",
      "updatedAt": "2025-09-09T12:14:33Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "443522c5dac9f777ead1f45efd2e26bbbbe2638a",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue29",
      "headRefOid": "dd492739ec38878c00663f74111515a577d5195e",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "body": "I do think we might need a specific state machine that describes the API interactions that results in reaching fully protected state. ",
          "createdAt": "2025-09-05T08:42:28Z",
          "updatedAt": "2025-09-05T08:42:28Z"
        },
        {
          "author": "teiclap",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe we need to start from the state machine. Limited to the API.",
          "createdAt": "2025-09-05T08:46:23Z",
          "updatedAt": "2025-09-05T08:46:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKszxDc6-C13C",
          "commit": {
            "abbreviatedOid": "8a141c0"
          },
          "author": "gloinul",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-09-05T08:09:36Z",
          "updatedAt": "2025-09-05T08:12:16Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "So this is insufficiently general. We will have write this from the perspective of triggering actions in the Abstract API between the ULP and the DTLS Chunk for how to progress. ",
              "createdAt": "2025-09-05T08:09:36Z",
              "updatedAt": "2025-09-05T08:12:16Z"
            },
            {
              "originalPosition": 32,
              "body": "This will have to be split up in write key, versus receive keys as they will be set independently. ",
              "createdAt": "2025-09-05T08:10:27Z",
              "updatedAt": "2025-09-05T08:12:16Z"
            },
            {
              "originalPosition": 35,
              "body": "So the sending of encrypted HB we haven't discussed. I would think these depends on the setting of this endpoints write key. ",
              "createdAt": "2025-09-05T08:11:24Z",
              "updatedAt": "2025-09-05T08:12:16Z"
            },
            {
              "originalPosition": 38,
              "body": "The discussion so far is to have the ULP tell the DTLS Chunk from which point it can it must enforce the \"only encrypted\" rule. ",
              "createdAt": "2025-09-05T08:12:06Z",
              "updatedAt": "2025-09-05T08:12:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOKszxDc6pc4-J",
      "title": "Updated Fig.1 and description",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/65",
      "state": "OPEN",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-19T08:01:44Z",
      "updatedAt": "2025-09-19T08:01:44Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "443522c5dac9f777ead1f45efd2e26bbbbe2638a",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue62",
      "headRefOid": "a9098aa1a1b67cddabc590e8f0ce7da7c5131d6f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 66,
      "id": "PR_kwDOKszxDc6pdo2A",
      "title": "Issue22",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/66",
      "state": "MERGED",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Moved the validation to handshake mechanism as a requirement for issue #22 ",
      "createdAt": "2025-09-19T09:07:02Z",
      "updatedAt": "2025-09-19T09:13:54Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "443522c5dac9f777ead1f45efd2e26bbbbe2638a",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue22",
      "headRefOid": "5fe6d57b5fe94944941c10131df26204588a9fdb",
      "closedAt": "2025-09-19T09:13:54Z",
      "mergedAt": "2025-09-19T09:13:54Z",
      "mergedBy": "teiclap",
      "mergeCommit": {
        "oid": "4855aadb25b4224fab87257ca6780ff12a1d6e33"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 67,
      "id": "PR_kwDOKszxDc6pe2V0",
      "title": "New Chunk Flag register for issue #41",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/67",
      "state": "OPEN",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "teiclap"
      ],
      "labels": [],
      "body": "Fix for issue #41 ",
      "createdAt": "2025-09-19T10:55:12Z",
      "updatedAt": "2025-09-19T13:46:09Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4855aadb25b4224fab87257ca6780ff12a1d6e33",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue41",
      "headRefOid": "6a9e3dad5ef4a64ae9c8364f223a05bfc410d8b4",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 68,
      "id": "PR_kwDOKszxDc6pfqpp",
      "title": "Moved references to Key Management in own section #56",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/68",
      "state": "OPEN",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed Issue #56 ",
      "createdAt": "2025-09-19T12:16:22Z",
      "updatedAt": "2025-09-19T12:16:22Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4855aadb25b4224fab87257ca6780ff12a1d6e33",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue56",
      "headRefOid": "a86274952a67118e23b9ba24d37fb6c1ab577b51",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 69,
      "id": "PR_kwDOKszxDc6pf4Ch",
      "title": "Added API for including Protection Solution Vector",
      "url": "https://github.com/gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk/pull/69",
      "state": "OPEN",
      "author": "teiclap",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-19T12:35:50Z",
      "updatedAt": "2025-09-19T12:35:50Z",
      "baseRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "baseRefName": "main",
      "baseRefOid": "4855aadb25b4224fab87257ca6780ff12a1d6e33",
      "headRepository": "gloinul/draft-westerlund-tsvwg-sctp-dtls-chunk",
      "headRefName": "issue63",
      "headRefOid": "a588c0fad02b4c614ae75a1ac904d53db1cdbaa9",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}